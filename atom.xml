<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FuXi&#39;s Daily</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-09T09:38:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java EE(5) - Java Servlet Cookies</title>
    <link href="http://yoursite.com/2018/10/09/Java-Servlet-Cookies/"/>
    <id>http://yoursite.com/2018/10/09/Java-Servlet-Cookies/</id>
    <published>2018-10-09T02:57:52.000Z</published>
    <updated>2018-10-09T09:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目录"><a href="#1-目录" class="headerlink" title="1. 目录"></a>1. 目录</h1><!-- TOC --><ul><li><a href="#1-目录">1. 目录</a></li><li><a href="#2-cookies-in-java-servlet">2. Cookies in Java Servlet</a></li><li><a href="#3-java-servlet-cookie-example">3. Java Servlet Cookie Example</a></li><li><a href="#4-总结和思考">4. 总结和思考</a></li><li><a href="#5-参考文档">5. 参考文档</a></li></ul><!-- /TOC --><p>Cookie在Web客户端 - 服务器通信中经常使用，它不是特定于Java的东西。</p><p>Cookie的一些常见用法是：</p><ol><li>使用Cookies进行会话认证，我们在Servlet Session Tutorial中了解到，HttpSession使用“JSESSIONID”cookie来跟踪用户会话。</li><li>根据客户的偏好对客户进行个性化响应，例如我们可以在客户端浏览器中将背景颜色设置为cookie，然后使用它来自定义响应背景颜色，图像等。</li></ol><h1 id="2-Cookies-in-Java-Servlet"><a href="#2-Cookies-in-Java-Servlet" class="headerlink" title="2. Cookies in Java Servlet"></a>2. Cookies in Java Servlet</h1><p>Cookie是服务器发送到客户端的文本数据，它将保存在客户端本地计算机上。当客户端向服务器发送请求时，它会将服务器存储的cookie传递给请求头，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie Test="Test Cookie5"</span><br></pre></td></tr></table></figure><p>客户端可以向服务器发送多个cookie，我们可以禁用cookie以从浏览器首选项存储在客户端。 除了键值对之外，服务器还在响应头中向客户端发送一些其他数据，它看起来如下所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie Counter=7;</span><br><span class="line">Version=1;</span><br><span class="line">Comment="SetCookie Counter";</span><br><span class="line">Domain="localhost";</span><br><span class="line">Max-Age=86400;</span><br><span class="line">Expires=Thu, 15-Aug-2013 20:19:19 GMT;</span><br><span class="line">Path=/cookie/SetCookie</span><br><span class="line"></span><br><span class="line">Set-Cookie Test="Test Cookie7";</span><br><span class="line">Version=1;</span><br><span class="line">Comment="Test Cookie"</span><br></pre></td></tr></table></figure><p>请注意，服务器会为cookie发送一些其他信息，例如注释，域，cookie到期前的最长时间以及浏览器应在请求中发回cookie的路径。 但是当客户端向浏览器发送cookie时，它只会发送cookie的名称和值。</p><p>Servlet API通过实现Serializable和Cloneable接口的javax.servlet.http.Cookie类提供cookie支持。</p><p>提供HttpServletRequest getCookies（）方法是为了从请求中获取Cookie数组，因为没有必要从请求中添加Cookie，因此没有方法可以为 Request 设置或添加cookie。</p><p>类似地，HttpServletResponse 提供了 addCookie（Cookie c）方法来在响应头中附加cookie，没有用于cookie的getter方法。</p><p>Cookie类有一个带有名称和值的构造函数，因为它们是cookie的必需参数，所有其他参数都是可选的。</p><p>Cookie类的一些重要方法是：</p><ol><li><em>getComment()</em> - 返回描述此cookie用途的注释，在客户端使用。 请注意，当客户端在请求标头中发送cookie时，服务器不会收到此信息。 我们可以使用setComment（）方法在服务器端设置cookie描述。</li><li><em>getDomain()</em> - 返回cookie的域名。我们可以使用setDomain（）方法设置cookie的域名，如果设置了域名，则cookie将仅发送给该特定域请求。</li><li><em>getMaxAge()</em> - 以秒为单位返回最大年龄。我们可以使用setMaxAge（）来设置cookie的到期时间。</li><li><em>getName()</em> - 返回cookie的名称，可以在浏览器和服务器端使用。名称没有setter，我们只能通过构造函数设置一次名称。</li><li><em>getPath()</em> - 返回服务器端的路径到返回Cookie的浏览器。我们将看到它的示例，其中cookie将仅发送到特定资源。我们可以使用setPath（）来指示浏览器仅将cookie发送到特定资源。</li><li><em>getSecure()</em> - 如果浏览器仅通过安全协议发送cookie，则返回true;如果浏览器可以使用任何协议发送cookie，则返回false。我们可以使用setSecure（）方法指示浏览器仅通过安全协议发送cookie。</li><li><em>getValue()</em> - 以String的形式返回cookie的值。还有setValue（）方法来更改cookie的值。</li><li><em>getVersion()</em> - 返回此cookie的协议版本。还有一个版本的setter方法。</li><li><em>isHttpOnly()</em> - 检查此Cookie是否已标记为HttpOnly。还有一个setter方法，我们可以使用它来指示客户端仅将其用于HTTP。</li></ol><h1 id="3-Java-Servlet-Cookie-Example"><a href="#3-Java-Servlet-Cookie-Example" class="headerlink" title="3. Java Servlet Cookie Example"></a>3. Java Servlet Cookie Example</h1><p>我们将创建两个简单的servlet来从客户端打印cookie，在一个servlet中我们将为每个域设置一个cookie和一个带有Path设置的cookie，这样其他servlet就不会从客户端接收到它。</p><p>我们在java servlet中的cookie项目结构如下图所示。<br><img src="/2018/10/09/Java-Servlet-Cookies/Servlet-Cookie-Project.png" alt=""></p><p><em>SetCookie.java</em>: 该servlet将设置一些cookie并将其发送到浏览器。它还将打印cookie信息并将其作为HTML响应发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.journaldev.servlet.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/cookie/SetCookie"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">Cookie[] requestCookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;h3&gt;Hello Browser!!&lt;/h3&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span>(requestCookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">out.write(<span class="string">"&lt;h3&gt;Request Cookies:&lt;/h3&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span>(Cookie c : requestCookies)&#123;</span><br><span class="line">out.write(<span class="string">"Name="</span>+c.getName()+<span class="string">", Value="</span>+c.getValue()+<span class="string">", Comment="</span>+c.getComment()</span><br><span class="line">+<span class="string">", Domain="</span>+c.getDomain()+<span class="string">", MaxAge="</span>+c.getMaxAge()+<span class="string">", Path="</span>+c.getPath()</span><br><span class="line">+<span class="string">", Version="</span>+c.getVersion());</span><br><span class="line">out.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Set cookies for counter, accessible to only this servlet</span></span><br><span class="line">count++;</span><br><span class="line">Cookie counterCookie = <span class="keyword">new</span> Cookie(<span class="string">"Counter"</span>, String.valueOf(count));</span><br><span class="line"><span class="comment">//add some description to be viewed in browser cookie viewer</span></span><br><span class="line">counterCookie.setComment(<span class="string">"SetCookie Counter"</span>);</span><br><span class="line"><span class="comment">//setting max age to be 1 day</span></span><br><span class="line">counterCookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">//set path to make it accessible to only this servlet</span></span><br><span class="line">counterCookie.setPath(<span class="string">"/ServletCookie/cookie/SetCookie"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//adding cookie to the response</span></span><br><span class="line">response.addCookie(counterCookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">//set a domain specific cookie</span></span><br><span class="line">Cookie domainCookie = <span class="keyword">new</span> Cookie(<span class="string">"Test"</span>, <span class="string">"Test Cookie"</span>+String.valueOf(count));</span><br><span class="line">domainCookie.setComment(<span class="string">"Test Cookie"</span>);</span><br><span class="line">response.addCookie(domainCookie);</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>GetCookie.java</em>: 一个简单的servlet，它将演示在具有特定路径的SetCookie中设置的cookie不会被浏览器发送到此servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.journaldev.servlet.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/cookie/GetCookie"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">Cookie[] requestCookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;h3&gt;Hello Browser!!&lt;/h3&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span>(requestCookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">out.write(<span class="string">"&lt;h3&gt;Request Cookies:&lt;/h3&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span>(Cookie c : requestCookies)&#123;</span><br><span class="line">out.write(<span class="string">"Name="</span>+c.getName()+<span class="string">", Value="</span>+c.getValue()+<span class="string">", Comment="</span>+c.getComment()</span><br><span class="line">+<span class="string">", Domain="</span>+c.getDomain()+<span class="string">", MaxAge="</span>+c.getMaxAge()+<span class="string">", Path="</span>+c.getPath()</span><br><span class="line">+<span class="string">", Version="</span>+c.getVersion());</span><br><span class="line">out.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="comment">//delete cookie</span></span><br><span class="line"><span class="keyword">if</span>(c.getName().equals(<span class="string">"Test"</span>))&#123;</span><br><span class="line">c.setMaxAge(<span class="number">0</span>);</span><br><span class="line">response.addCookie(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.write(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当运行程序是，可以注意到如下几点：</p><ul><li>Cookie “Counter”仅发送到SetCookie，GetCookie将永远不会收到此Cookie。</li><li>除名称和值外，所有其他变量都是打印默认值。 MaxAge默认值为-1，版本默认值为0。</li><li>GetCookie将 “Test” cookie的最大年龄设置为0，以便客户端浏览器将其过期并删除。</li></ul><p>这就是Java中的cookie以及它在Servlet API中的用法，您可能也想查看其他servlet教程。</p><h1 id="4-总结和思考"><a href="#4-总结和思考" class="headerlink" title="4. 总结和思考"></a>4. 总结和思考</h1><ol><li>Cookies vs Session，可以这么认为 Cookie和 Session 是两种保存会话状态的技术，Cookie是将相关信息存放在客户端，Session是讲会话信息存放在服务器端，一般将重要的如用户登录信息保存为Session，其他信息如果需要保留，可以存放在Cookie中; <br>由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择，如URL重写等技术。 我以前对http的相关知识不是很了解，学习这些能让我对上层的应用了解的更多一些；可见参考文档: 1. <a href="https://www.cnblogs.com/endlessdream/p/4699273.html" target="_blank" rel="noopener">Session和Cookie的区别与联系</a>; 2. <a href="https://www.cnblogs.com/shiyangxt/articles/1305506.html" target="_blank" rel="noopener">cookie 和session 的区别详解</a>;</li></ol><h1 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5. 参考文档"></a>5. 参考文档</h1><p><a href="https://www.journaldev.com/1956/java-servlet-cookies-example" target="_blank" rel="noopener">Java Servlet Cookies Example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-目录&quot;&gt;&lt;a href=&quot;#1-目录&quot; class=&quot;headerlink&quot; title=&quot;1. 目录&quot;&gt;&lt;/a&gt;1. 目录&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-目录&quot;&gt;1. 目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java EE(4) - Servlet Listener</title>
    <link href="http://yoursite.com/2018/10/08/Servlet-Listener/"/>
    <id>http://yoursite.com/2018/10/08/Servlet-Listener/</id>
    <published>2018-10-08T02:53:18.000Z</published>
    <updated>2018-10-09T09:37:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目录"><a href="#1-目录" class="headerlink" title="1. 目录"></a>1. 目录</h1><!-- TOC --><ul><li><a href="#1-目录">1. 目录</a></li><li><a href="#2-为什么需要servlet-listener">2. 为什么需要Servlet Listener</a></li><li><a href="#3-servlet监听器接口以及事件对象">3. Servlet监听器接口以及事件对象</a></li><li><a href="#4-servlet-listener-配置">4. Servlet Listener 配置</a></li><li><a href="#5-servlet-listener-example">5. Servlet Listener Example</a></li><li><a href="#6-servletcontextlistener">6. ServletContextListener</a></li><li><a href="#7-servletcontextattributelistener">7. ServletContextAttributeListener</a></li><li><a href="#8-httpsessionlistener">8. HttpSessionListener</a></li><li><a href="#9-servletrequestlistener">9. ServletRequestListener</a></li><li><a href="#10-运行程序">10. 运行程序</a></li><li><a href="#11-思考和总结">11. 思考和总结</a></li><li><a href="#12-参考文档">12. 参考文档</a></li></ul><!-- /TOC --><p>在本教程中，我们将介绍servlet监听器，servlet监听器的好处，我们可以对监听器执行的一些常见任务，servlet API监听器接口和Event对象。 最后，我们将创建一个简单的Web项目，以显示ServletContext，Session和ServletRequest的常用Listener实现示例。</p><h1 id="2-为什么需要Servlet-Listener"><a href="#2-为什么需要Servlet-Listener" class="headerlink" title="2. 为什么需要Servlet Listener"></a>2. 为什么需要Servlet Listener</h1><p>我们知道使用ServletContext，我们可以创建一个具有所有其他servlet可以访问的应用程序范围的属性，但我们可以仅在部署描述符（web.xml）中将ServletContext init参数初始化为String。 如果我们的应用程序是面向数据库的，并且我们想在ServletContext中为数据库连接设置一个属性，该怎么办？ 如果您的应用程序有一个入口点（用户登录），那么您可以在第一个servlet请求中执行此操作，但如果我们有多个入口点，那么在任何地方执行它将导致大量代码冗余。 此外，如果数据库已关闭或未正确配置，我们将无法知道，直到第一个客户端请求到达服务器。 为了处理这些场景，servlet API提供了我们可以实现和配置的侦听器接口，以监听事件并执行某些操作。</p><p><em>Event</em>是某种事情的发生，在Web应用程序世界中，事件可以是应用程序的初始化，销毁应用程序，来自客户端的请求，创建/销毁会话，会话中的属性修改等。</p><p><em>Servlet API</em>提供了不同类型的监听器接口，我们可以在web.xml中实现和配置这些接口，以便在发生特定事件时处理某些事务。 例如，在上面的场景中，我们可以为应用程序启动事件创建一个Listener，以读取上下文init参数并创建数据库连接并将其设置为context属性以供其他资源使用。</p><h1 id="3-Servlet监听器接口以及事件对象"><a href="#3-Servlet监听器接口以及事件对象" class="headerlink" title="3. Servlet监听器接口以及事件对象"></a>3. Servlet监听器接口以及事件对象</h1><p>Servlet API为不同类型的事件提供不同类型的侦听器。 监听器接口声明方法可以处理一组类似的事件，例如我们有ServletContext监听器来监听上下文的启动和关闭事件。 侦听器接口中的每个方法都将Event对象作为输入。 Event对象用作包装器，为侦听器提供特定对象。</p><p>Servlet API提供以下事件对象：</p><ol><li><em>javax.servlet.AsyncEvnet</em> - 在ServletRequest上启动的异步操作（通过调用ServletRequest.startAsync或ServletRequest.startAsync（ServletRequest，ServletResponse））完成，超时或产生错误时触发的事件。</li><li><em>javax.servlet.http.HttpSessionBindingEvent</em> - 此类型的事件要么发送到在会话中绑定或取消绑定时实现HttpSessionBindingListener的对象，要么发送到在任何属性绑定，未绑定或在会话中替换时已在web.xml中配置的HttpSessionAttributeListener。<br>会话通过调用HttpSession.setAttribute来绑定对象，并通过调用HttpSession.removeAttribute来解除绑定对象。<br>当从会话中删除对象时，我们可以将此事件用于清理活动。</li><li><em>javax.servlet.http.HttpSessionEvent</em> - 这是表示Web应用程序中会话更改的事件通知类。</li><li><em>javax.servlet.ServletContextAttributeEvent</em> - 有关Web应用程序的ServletContext属性更改的通知事件类。</li><li><em>javax.servlet.ServletContextEvent</em> - 这是有关Web应用程序的servlet上下文更改的通知事件类。</li><li><em>javax.servlet.ServletRequestEvent</em> - 此类事件表示ServletRequest的生命周期事件。事件的来源是此Web应用程序的ServletContext。</li><li><em>javax.servlet.ServletRequestAttributeEvent</em> - 这是用于通知应用程序中servlet请求的属性更改的事件类。</li></ol><p>Servlet API提供以下监听器接口。</p><ol><li><em>javax.servlet.AsyncListener</em> - 监听器，如果在已添加监听器的ServletRequest上启动的异步操作已完成，超时或导致错误，将通知该监听器。</li><li><em>javax.servlet.ServletContextListener</em> - 用于接收有关ServletContext生命周期更改的通知事件的接口。</li><li><em>javax.servlet.ServletContextAttributeListener</em> - 用于接收有关ServletContext属性更改的通知事件的接口。</li><li><em>javax.servlet.ServletRequestListener</em> - 用于接收有关进入和退出Web应用程序范围的请求的通知事件的接口。</li><li><em>javax.servlet.ServletRequestAttributeListener</em> - 用于接收有关ServletRequest属性更改的通知事件的接口。</li><li><em>javax.servlet.http.HttpSessionListener</em> - 用于接收有关HttpSession生命周期更改的通知事件的接口。</li><li><em>javax.servlet.http.HttpSessionBindingListener</em> - 用户会话中的对象绑定或者解绑时的时间接口</li><li><em>javax.servlet.http.HttpSessionAttributeListener</em> - 用于接收有关HttpSession属性更改的通知事件的接口。</li><li><em>javax.servlet.http.HttpSessionActivationListener</em> - 绑定到会话的对象可以侦听容器事件，通知它们会话将被钝化并且会话将被激活。 需要在VM之间迁移会话或持久化会话的容器被要求通知绑定到实现HttpSessionActivationListener的会话的所有属性。</li></ol><h1 id="4-Servlet-Listener-配置"><a href="#4-Servlet-Listener-配置" class="headerlink" title="4. Servlet Listener 配置"></a>4. Servlet Listener 配置</h1><p>我们可以使用@WebListener注释将类声明为Listener，但是该类应该实现一个或多个Listener接口。</p><p>我们可以在web.xml中定义监听器如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    com.journaldev.listener.AppContextListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-Servlet-Listener-Example"><a href="#5-Servlet-Listener-Example" class="headerlink" title="5. Servlet Listener Example"></a>5. Servlet Listener Example</h1><p>让我们创建一个简单的Web应用程序来查看运行中的servlet侦听器。我们将在Eclipse ServletListenerExample中创建动态Web项目，这些项目结构将如下图所示。<br><img src="/2018/10/08/Servlet-Listener/Servlet-Listener-Example.png" alt=""></p><p>部署描述符web.xml如下，其中定义了若干个上下文初始化参数，以及配置监听器等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletListenerExample<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>DBUSER<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>pankaj<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>DBPWD<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>DBURL<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost/mysql_db<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.journaldev.listener.AppContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.journaldev.listener.AppContextAttributeListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.journaldev.listener.MySessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.journaldev.listener.MyServletRequestListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>DBConnectionManager</em>: 这是数据库连接的类，为简单起见，我没有提供实际数据库连接的代码。我们将此对象设置为servlet上下文的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnectionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dbURL;</span><br><span class="line"><span class="keyword">private</span> String user;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Connection con;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DBConnectionManager</span><span class="params">(String url, String u, String p)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dbURL=url;</span><br><span class="line"><span class="keyword">this</span>.user=u;</span><br><span class="line"><span class="keyword">this</span>.password=p;</span><br><span class="line"><span class="comment">//create db connection now</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.con;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//close DB connection here</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>MyServlet</em>: 一个简单的servlet类，我将在其中使用会话，属性等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MyServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletContext ctx = request.getServletContext();</span><br><span class="line">ctx.setAttribute(<span class="string">"User"</span>, <span class="string">"Pankaj"</span>);</span><br><span class="line">String user = (String) ctx.getAttribute(<span class="string">"User"</span>);</span><br><span class="line">ctx.removeAttribute(<span class="string">"User"</span>);</span><br><span class="line"></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.invalidate();</span><br><span class="line"></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.write(<span class="string">"Hi "</span>+user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们将实现监听器类，我为常用的监听器提供示例监听器类 - ServletContextListener，ServletContextAttributeListener，ServletRequestListener和HttpSessionListener。</p><h1 id="6-ServletContextListener"><a href="#6-ServletContextListener" class="headerlink" title="6. ServletContextListener"></a>6. ServletContextListener</h1><p>我们将读取servlet context init参数以创建DBConnectionManager对象并将其设置为ServletContext对象的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.journaldev.db.DBConnectionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">    ServletContext ctx = servletContextEvent.getServletContext();</span><br><span class="line">    </span><br><span class="line">    String url = ctx.getInitParameter(<span class="string">"DBURL"</span>);</span><br><span class="line">    String u = ctx.getInitParameter(<span class="string">"DBUSER"</span>);</span><br><span class="line">    String p = ctx.getInitParameter(<span class="string">"DBPWD"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//create database connection from init parameters and set it to context</span></span><br><span class="line">    DBConnectionManager dbManager = <span class="keyword">new</span> DBConnectionManager(url, u, p);</span><br><span class="line">    ctx.setAttribute(<span class="string">"DBManager"</span>, dbManager);</span><br><span class="line">    System.out.println(<span class="string">"Database connection initialized for Application."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">    ServletContext ctx = servletContextEvent.getServletContext();</span><br><span class="line">    DBConnectionManager dbManager = (DBConnectionManager) ctx.getAttribute(<span class="string">"DBManager"</span>);</span><br><span class="line">    dbManager.closeConnection();</span><br><span class="line">    System.out.println(<span class="string">"Database connection closed for Application."</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-ServletContextAttributeListener"><a href="#7-ServletContextAttributeListener" class="headerlink" title="7. ServletContextAttributeListener"></a>7. ServletContextAttributeListener</h1><p>在servlet上下文中添加，删除或替换属性时记录事件的简单实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContextAttributeListener</span> <span class="keyword">implements</span> <span class="title">ServletContextAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ServletContext attribute added::&#123;"</span>+servletContextAttributeEvent.getName()+<span class="string">","</span>+servletContextAttributeEvent.getValue()+<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ServletContext attribute replaced::&#123;"</span>+servletContextAttributeEvent.getName()+<span class="string">","</span>+servletContextAttributeEvent.getValue()+<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ServletContext attribute removed::&#123;"</span>+servletContextAttributeEvent.getName()+<span class="string">","</span>+servletContextAttributeEvent.getValue()+<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-HttpSessionListener"><a href="#8-HttpSessionListener" class="headerlink" title="8. HttpSessionListener"></a>8. HttpSessionListener</h1><p>创建或销毁会话时记录事件的简单实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent sessionEvent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Session Created:: ID="</span>+sessionEvent.getSession().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent sessionEvent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Session Destroyed:: ID="</span>+sessionEvent.getSession().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-ServletRequestListener"><a href="#9-ServletRequestListener" class="headerlink" title="9. ServletRequestListener"></a>9. ServletRequestListener</h1><p>ServletRequestListener接口的简单实现，用于在初始化和销毁​​请求时记录ServletRequest IP地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletRequestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">    ServletRequest servletRequest = servletRequestEvent.getServletRequest();</span><br><span class="line">    System.out.println(<span class="string">"ServletRequest destroyed. Remote IP="</span>+servletRequest.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">    ServletRequest servletRequest = servletRequestEvent.getServletRequest();</span><br><span class="line">    System.out.println(<span class="string">"ServletRequest initialized. Remote IP="</span>+servletRequest.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-运行程序"><a href="#10-运行程序" class="headerlink" title="10. 运行程序"></a>10. 运行程序</h1><p>现在，当我们部署应用程序并使用URL <a href="http://localhost：8080/ServletListenerExample/MyServlet" target="_blank" rel="noopener">http://localhost：8080/ServletListenerExample/MyServlet</a> 在浏览器中访问MyServlet时，我们将在服务器日志文件中看到以下日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ServletContext attribute added::&#123;DBManager,com.journaldev.db.DBConnectionManager@4def3d1b&#125;</span><br><span class="line">Database connection initialized for Application.</span><br><span class="line">ServletContext attribute added::&#123;org.apache.jasper.compiler.TldLocationsCache,org.apache.jasper.compiler.TldLocationsCache@1594df96&#125;</span><br><span class="line"></span><br><span class="line">ServletRequest initialized. Remote IP=0:0:0:0:0:0:0:1%0</span><br><span class="line">ServletContext attribute added::&#123;User,Pankaj&#125;</span><br><span class="line">ServletContext attribute removed::&#123;User,Pankaj&#125;</span><br><span class="line">Session Created:: ID=8805E7AE4CCCF98AFD60142A6B300CD6</span><br><span class="line">Session Destroyed:: ID=8805E7AE4CCCF98AFD60142A6B300CD6</span><br><span class="line">ServletRequest destroyed. Remote IP=0:0:0:0:0:0:0:1%0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ServletRequest initialized. Remote IP=0:0:0:0:0:0:0:1%0</span><br><span class="line">ServletContext attribute added::&#123;User,Pankaj&#125;</span><br><span class="line">ServletContext attribute removed::&#123;User,Pankaj&#125;</span><br><span class="line">Session Created:: ID=88A7A1388AB96F611840886012A4475F</span><br><span class="line">Session Destroyed:: ID=88A7A1388AB96F611840886012A4475F</span><br><span class="line">ServletRequest destroyed. Remote IP=0:0:0:0:0:0:0:1%0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Database connection closed for Application.</span><br></pre></td></tr></table></figure><p>注意日志序列，它按执行顺序排列。您将关闭应用程序或关闭容器时将显示最后一个日志。</p><h1 id="11-思考和总结"><a href="#11-思考和总结" class="headerlink" title="11. 思考和总结"></a>11. 思考和总结</h1><p>我们学习分析了Java EE中的监听器的使用场景，作用和用法，其中需要注意的是，我刚开始把这个当成了Spring中的内容了，实际上Spring的核心就只有 IOC 以及 AOP 而已，其他的均为基于此二的扩展。所以这些东西可以认为是Java EE或者Java 的核心API的东西（关于Spring 与Java EE的关系，可见<a href="http://www.infoq.com/cn/news/2015/07/spring-javaee" target="_blank" rel="noopener">开发者眼中的Spring与Java EE</a>），这是个需要注意的地方。</p><p>第二点是我在看代码是想到的，比如说我一直不知道一些Spring MVC应用程序的入口在哪儿(特别是那些通过部署描述符web.xml配置的)，即何时进行DI的中的bean的管理的，知道看到今天这篇文档才完全搞搞清楚Spring中是如何完成Web应用程序上下文的初始化，也就是Ioc容器的初始化的(详情可见<a href="https://www.jianshu.com/p/523bfddf0810" target="_blank" rel="noopener">ContextLoaderListener解析</a>)。简单来说，就是在服务器启动时，监听器的响应动作contextInitialized被调用，在这个方法中，进行创建了spring context，并将其较为application的内置对象，初始化了Ioc容器。</p><h1 id="12-参考文档"><a href="#12-参考文档" class="headerlink" title="12. 参考文档"></a>12. 参考文档</h1><p><a href="https://www.journaldev.com/1945/servletcontextlistener-servlet-listener-example" target="_blank" rel="noopener">ServletContextListener Servlet Listener Example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-目录&quot;&gt;&lt;a href=&quot;#1-目录&quot; class=&quot;headerlink&quot; title=&quot;1. 目录&quot;&gt;&lt;/a&gt;1. 目录&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-目录&quot;&gt;1. 目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java EE(3) - Java Servlet Filter</title>
    <link href="http://yoursite.com/2018/10/02/Java-Servlet-Filter/"/>
    <id>http://yoursite.com/2018/10/02/Java-Servlet-Filter/</id>
    <published>2018-10-02T13:41:05.000Z</published>
    <updated>2018-10-09T09:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目录"><a href="#1-目录" class="headerlink" title="1. 目录"></a>1. 目录</h1><!-- TOC --><ul><li><a href="#1-目录">1. 目录</a></li><li><a href="#2-为什么需要servlet-filter">2. 为什么需要Servlet Filter?</a></li><li><a href="#3-servlet-filter-interface">3. Servlet Filter Interface</a></li><li><a href="#4-servlet-webfilter-annotation">4. Servlet WebFilter annotation</a></li><li><a href="#5-servlet-filter-configuration-in-webxml">5. Servlet Filter configuration in web.xml</a></li><li><a href="#6-servlet-filter-example-for-logging-and-session-validation">6. Servlet Filter example for logging and session validation</a></li><li><a href="#7-思考和总结">7. 思考和总结</a></li><li><a href="#8-参考文档">8. 参考文档</a></li></ul><!-- /TOC --><p>Java Servlet Filter用于拦截请求并进行一些预处理（Pre-Processing），可用于拦截响应并在发送到Web应用程序中的客户端之前进行后处理（Post-Processing）。</p><h1 id="2-为什么需要Servlet-Filter"><a href="#2-为什么需要Servlet-Filter" class="headerlink" title="2. 为什么需要Servlet Filter?"></a>2. 为什么需要Servlet Filter?</h1><p>在上一篇文章中，我们学习了如何在Web应用程序中管理会话，如果我们想确保只有在用户会话有效时才能访问资源，我们可以使用servlet会话属性来实现。方法很简单，但如果我们有很多servlet和jsps，那么由于冗余代码，它将变得难以维护。 如果我们希望将来更改属性名称，我们将不得不更改我们进行会话身份验证的所有位置。</p><p>这就是为什么我们有servlet过滤器。 Servlet过滤器是可插入（Pluggable）的Java组件，我们可以在它们被发送到servlet之前拦截和处理请求，并在servlet代码完成之后，容器将响应发送回客户端之前进行响应。</p><p>我们可以使用servlet过滤器执行的一些常见任务是：</p><ul><li>将请求参数记录到日志文件。</li><li>资源请求的身份验证和自动化。</li><li>在将请求主体或标头发送到servlet之前格式化。</li><li>压缩发送给客户端的响应数据。</li><li>通过添加一些cookie，标题信息等来改变响应。</li></ul><p>正如我之前提到的，servlet过滤器是可插入的，并在部署描述符（web.xml）文件中配置。 Servlet和过滤器都没有彼此意识到，我们可以通过编辑web.xml来添加或删除servlet过滤器。 我们可以为单个资源提供多个过滤器，我们可以在web.xml中为单个资源创建一系列过滤器。 我们可以通过实现javax.servlet.Filter接口来创建Servlet过滤器。</p><h1 id="3-Servlet-Filter-Interface"><a href="#3-Servlet-Filter-Interface" class="headerlink" title="3. Servlet Filter Interface"></a>3. Servlet Filter Interface</h1><p>Servlet Filter接口类似于Servlet接口，我们需要实现它来创建我们自己的servlet过滤器。 Servlet Filter接口包含Filter的生命周期方法，它由servlet容器管理。</p><p>Servlet过滤器界面生命周期方法是：</p><ol><li><em>void init(FilterConfig paramFilterConfig)</em> - 当容器初始化Filter时，这是被调用的方法。 此方法在过滤器的生命周期中只调用一次，我们应该初始化此方法中的任何资源。 容器使用FilterConfig向Filter提供init参数和servlet上下文对象。 我们可以在这个方法中抛出ServletException。</li><li><em>doFilter(ServletRequest paramServletRequest, ServletResponse paramServletResponse, FilterChain paramFilterChain)</em> - 这是容器每次必须将过滤器应用于资源时调用的方法。 Container提供请求和响应对象引用给过滤器为参数。 FilterChain用于调用链中的下一个过滤器。 这里有<a href="https://www.journaldev.com/1617/chain-of-responsibility-design-pattern-in-java" target="_blank" rel="noopener">责任链模式</a>的一个很好的例子。</li><li><em>void destroy()</em> - 当容器卸载Filter实例时，它会调用destroy（）方法。这是我们可以关闭过滤器打开的任何资源的方法。此方法在过滤器的生命周期中仅调用一次。</li></ol><h1 id="4-Servlet-WebFilter-annotation"><a href="#4-Servlet-WebFilter-annotation" class="headerlink" title="4. Servlet WebFilter annotation"></a>4. Servlet WebFilter annotation</h1><p>在Servlet 3.0中引入了javax.servlet.annotation.WebFilter，我们可以使用这个注释声明一个servlet过滤器。 我们可以使用此批注来定义init参数，过滤器名称和描述，servlet，url模式和调度程序类型以应用过滤器。 如果频繁更改过滤器配置，最好使用web.xml，因为这不需要您重新编译过滤器类。</p><p>辅助材料：<a href="https://www.journaldev.com/721/java-annotations" target="_blank" rel="noopener">Java Annotation Tutorial</a></p><h1 id="5-Servlet-Filter-configuration-in-web-xml"><a href="#5-Servlet-Filter-configuration-in-web-xml" class="headerlink" title="5. Servlet Filter configuration in web.xml"></a>5. Servlet Filter configuration in web.xml</h1><p>可以在web.xml中声明一个servlet 过滤器，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestLoggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.journaldev.servlet.filters.RequestLoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> <span class="comment">&lt;!-- optional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>testValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以将Filter映射到servlet类或url-patterns，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestLoggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> <span class="comment">&lt;!-- either url-pattern or servlet-name is mandatory --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在为servlet创建过滤器链时，容器首先处理url-patterns，然后处理servlet-names，因此如果必须确保以特定顺序执行过滤器，请在定义过滤器映射时给予额外注意。</p><p>Servlet过滤器通常用于客户端请求，但有时我们也希望将过滤器应用于RequestDispatcher，在这种情况下我们可以使用dispatcher元素，可能的值是REQUEST，FORWARD，INCLUDE，ERROR和ASYNC。 如果没有定义dispatcher，则仅应用于客户端请求。</p><h1 id="6-Servlet-Filter-example-for-logging-and-session-validation"><a href="#6-Servlet-Filter-example-for-logging-and-session-validation" class="headerlink" title="6. Servlet Filter example for logging and session validation"></a>6. Servlet Filter example for logging and session validation</h1><p>在下面这个例子中，我们将创建过滤器来记录请求cookie和参数，并验证除静态HTML和LoginServlet之外的所有资源的会话，因为它没有会话(Session)。</p><p>我们将创建一个动态Web项目ServletFilterExample，其项目结构将如下图所示。<br><img src="/2018/10/02/Java-Servlet-Filter/Servlet-Filter-Example-Project.png" alt="项目文件结构图"></p><p>login.html是我们的应用程序的入口点，用户将提供用于身份验证的登录ID和密码。</p><p>login.html的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"US-ASCII"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"LoginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>LoginServlet用于验证来自客户端的登录请求:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LoginServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String userID = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get request parameters for userID and password</span></span><br><span class="line">String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(userID.equals(user) &amp;&amp; password.equals(pwd))&#123;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"user"</span>, <span class="string">"Pankaj"</span>);</span><br><span class="line"><span class="comment">//setting session to expiry in 30 mins</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">Cookie userName = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>, user);</span><br><span class="line">userName.setMaxAge(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(userName);</span><br><span class="line">response.sendRedirect(<span class="string">"LoginSuccess.jsp"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">RequestDispatcher rd = getServletContext().getRequestDispatcher(<span class="string">"/login.html"</span>);</span><br><span class="line">PrintWriter out= response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;font color=red&gt;Either user name or password is wrong.&lt;/font&gt;"</span>);</span><br><span class="line">rd.include(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端通过身份验证后，会转发到LoginSuccess.jsp。<br>LoginSuccess.jsp代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=US-ASCII"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"US-ASCII"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=US-ASCII"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Success Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">            //<span class="attr">allow</span> <span class="attr">access</span> <span class="attr">only</span> <span class="attr">if</span> <span class="attr">session</span> <span class="attr">exists</span></span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">user</span> = <span class="string">(String)</span> <span class="attr">session.getAttribute</span>("<span class="attr">user</span>");</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">userName</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">sessionID</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Cookie</span>[] <span class="attr">cookies</span> = <span class="string">request.getCookies();</span></span></span><br><span class="line"><span class="tag">            <span class="attr">if</span>(<span class="attr">cookies</span> !=<span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">for</span>(<span class="attr">Cookie</span> <span class="attr">cookie</span> <span class="attr">:</span> <span class="attr">cookies</span>)&#123;</span></span><br><span class="line"><span class="tag">                <span class="attr">if</span>(<span class="attr">cookie.getName</span>()<span class="attr">.equals</span>("<span class="attr">user</span>")) <span class="attr">userName</span> = <span class="string">cookie.getValue();</span></span></span><br><span class="line"><span class="tag">                <span class="attr">if</span>(<span class="attr">cookie.getName</span>()<span class="attr">.equals</span>("<span class="attr">JSESSIONID</span>")) <span class="attr">sessionID</span> = <span class="string">cookie.getValue();</span></span></span><br><span class="line"><span class="tag">                &#125;</span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hi <span class="tag">&lt;<span class="name">%=userName</span> %&gt;</span>, Login successful. Your Session ID=<span class="tag">&lt;<span class="name">%=sessionID</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        User=<span class="tag">&lt;<span class="name">%=user</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"CheckoutPage.jsp"</span>&gt;</span>Checkout Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"LogoutServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Logout"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请注意，上面的JSP中没有会话验证逻辑。它包含指向另一个JSP页面CheckoutPage.jsp的链接。<br>CheckoutPage.jsp代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=US-ASCII"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"US-ASCII"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=US-ASCII"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Success Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">userName</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">sessionID</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Cookie</span>[] <span class="attr">cookies</span> = <span class="string">request.getCookies();</span></span></span><br><span class="line"><span class="tag">        <span class="attr">if</span>(<span class="attr">cookies</span> !=<span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">for</span>(<span class="attr">Cookie</span> <span class="attr">cookie</span> <span class="attr">:</span> <span class="attr">cookies</span>)&#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">if</span>(<span class="attr">cookie.getName</span>()<span class="attr">.equals</span>("<span class="attr">user</span>")) <span class="attr">userName</span> = <span class="string">cookie.getValue();</span></span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hi <span class="tag">&lt;<span class="name">%=userName</span> %&gt;</span>, do the checkout.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"LogoutServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Logout"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当客户端点击任何JSP页面中的Logout按钮时，将调用LogoutServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LogoutServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LogoutServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"JSESSIONID"</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">"JSESSIONID="</span>+cookie.getValue());</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//invalidate the session if exists</span></span><br><span class="line">    HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">    System.out.println(<span class="string">"User="</span>+session.getAttribute(<span class="string">"user"</span>));</span><br><span class="line">    <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">    response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们将创建日志和身份验证过滤器类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet Filter implementation class RequestLoggingFilter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/RequestLoggingFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLoggingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ServletContext context;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = fConfig.getServletContext();</span><br><span class="line"><span class="keyword">this</span>.context.log(<span class="string">"RequestLoggingFilter initialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">Enumeration&lt;String&gt; params = req.getParameterNames();</span><br><span class="line"><span class="keyword">while</span>(params.hasMoreElements())&#123;</span><br><span class="line">String name = params.nextElement();</span><br><span class="line">String value = request.getParameter(name);</span><br><span class="line"><span class="keyword">this</span>.context.log(req.getRemoteAddr() + <span class="string">"::Request Params::&#123;"</span>+name+<span class="string">"="</span>+value+<span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line"><span class="keyword">this</span>.context.log(req.getRemoteAddr() + <span class="string">"::Cookie::&#123;"</span>+cookie.getName()+<span class="string">","</span>+cookie.getValue()+<span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pass the request along the filter chain</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//we can close resources here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>身份验证的过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/AuthenticationFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ServletContext context;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = fConfig.getServletContext();</span><br><span class="line"><span class="keyword">this</span>.context.log(<span class="string">"AuthenticationFilter initialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">String uri = req.getRequestURI();</span><br><span class="line"><span class="keyword">this</span>.context.log(<span class="string">"Requested Resource::"</span>+uri);</span><br><span class="line"></span><br><span class="line">HttpSession session = req.getSession(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//如果不存在session，并且uri不是以html结尾的；或者uri不是以loginServlet结尾的，我们就进行重定向</span></span><br><span class="line"><span class="keyword">if</span>(session == <span class="keyword">null</span> &amp;&amp; !(uri.endsWith(<span class="string">"html"</span>) || uri.endsWith(<span class="string">"LoginServlet"</span>)))&#123;</span><br><span class="line"><span class="keyword">this</span>.context.log(<span class="string">"Unauthorized access request"</span>);</span><br><span class="line">res.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// pass the request along the filter chain</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//close any resources here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，我们不验证任何HTML页面或LoginServlet。现在我们将在web.xml文件中配置这些过滤器映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletFilterExample<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestLoggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.journaldev.servlet.filters.RequestLoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.journaldev.servlet.filters.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestLoggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们运行应用程序，会得到如下的结果：<br><img src="/2018/10/02/Java-Servlet-Filter/Servlet-Filter-Login.png" alt="login"><br><img src="/2018/10/02/Java-Servlet-Filter/Servlet-Filter-Login-Success.png" alt="loginSucess"><br><img src="/2018/10/02/Java-Servlet-Filter/Servlet-Filter-Checkout.png" alt="logout"></p><p>如果您未登录并尝试访问任何JSP页面，则会转到登录页面。<br>在服务器日志文件中，您可以看到servlet过滤器和servlet编写的日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Aug 13, 2013 1:06:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,B7275762B8D23121152B1270D6EB240A&#125;</span><br><span class="line">Aug 13, 2013 1:06:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/</span><br><span class="line">Aug 13, 2013 1:06:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Unauthorized access request</span><br><span class="line">Aug 13, 2013 1:06:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,B7275762B8D23121152B1270D6EB240A&#125;</span><br><span class="line">Aug 13, 2013 1:06:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/login.html</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Request Params::&#123;pwd=password&#125;</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Request Params::&#123;user=admin&#125;</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,B7275762B8D23121152B1270D6EB240A&#125;</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/LoginServlet</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,8BDF777933194EDCAC1D8F1B73633C56&#125;</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;user,admin&#125;</span><br><span class="line">Aug 13, 2013 1:06:43 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/LoginSuccess.jsp</span><br><span class="line">Aug 13, 2013 1:06:52 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,8BDF777933194EDCAC1D8F1B73633C56&#125;</span><br><span class="line">Aug 13, 2013 1:06:52 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;user,admin&#125;</span><br><span class="line">Aug 13, 2013 1:06:52 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/CheckoutPage.jsp</span><br><span class="line">Aug 13, 2013 1:07:00 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,8BDF777933194EDCAC1D8F1B73633C56&#125;</span><br><span class="line">Aug 13, 2013 1:07:00 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;user,admin&#125;</span><br><span class="line">Aug 13, 2013 1:07:00 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/LogoutServlet</span><br><span class="line">JSESSIONID=8BDF777933194EDCAC1D8F1B73633C56</span><br><span class="line">User=Pankaj</span><br><span class="line">Aug 13, 2013 1:07:00 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,8BDF777933194EDCAC1D8F1B73633C56&#125;</span><br><span class="line">Aug 13, 2013 1:07:00 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;user,admin&#125;</span><br><span class="line">Aug 13, 2013 1:07:00 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/login.html</span><br><span class="line">Aug 13, 2013 1:07:06 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,8BDF777933194EDCAC1D8F1B73633C56&#125;</span><br><span class="line">Aug 13, 2013 1:07:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;user,admin&#125;</span><br><span class="line">Aug 13, 2013 1:07:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/LoginSuccess.jsp</span><br><span class="line">Aug 13, 2013 1:07:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Unauthorized access request</span><br><span class="line">Aug 13, 2013 1:07:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;JSESSIONID,8BDF777933194EDCAC1D8F1B73633C56&#125;</span><br><span class="line">Aug 13, 2013 1:07:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: 0:0:0:0:0:0:0:1%0::Cookie::&#123;user,admin&#125;</span><br><span class="line">Aug 13, 2013 1:07:07 AM org.apache.catalina.core.ApplicationContext log</span><br><span class="line">INFO: Requested Resource::/ServletFilterExample/login.html</span><br></pre></td></tr></table></figure><p>这就是Java中的Servlet过滤器，它是J2EE Web应用程序的一个重要特性，我们应该将它用于各种servlet执行的常见任务。在以后的文章中，我们将研究servlet监听器和cookie。</p><h1 id="7-思考和总结"><a href="#7-思考和总结" class="headerlink" title="7. 思考和总结"></a>7. 思考和总结</h1><p>这个文档较为详细的示范和总结了如何使用过滤器，也让我对对过滤器的应用场景有一个较为形象的理解。一遍看下来，主要有以下几个问题：</p><ol><li>对Session的部分还不是很熟悉，需要在看看前一章的JSESSION的内容；</li><li>这些是基于jsp的实例，考虑到现在前后端分离的架构，过滤器改如何应用呢？</li><li>如何避免编写web.xml？比如说通过编程的方式来完成过滤器的设置。</li></ol><h1 id="8-参考文档"><a href="#8-参考文档" class="headerlink" title="8. 参考文档"></a>8. 参考文档</h1><p><a href="https://www.journaldev.com/1933/java-servlet-filter-example-tutorial" target="_blank" rel="noopener">Java Servlet Filter Example Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-目录&quot;&gt;&lt;a href=&quot;#1-目录&quot; class=&quot;headerlink&quot; title=&quot;1. 目录&quot;&gt;&lt;/a&gt;1. 目录&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-目录&quot;&gt;1. 目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java EE(2) - Session Management in Java</title>
    <link href="http://yoursite.com/2018/10/02/Session-Management-in-Java/"/>
    <id>http://yoursite.com/2018/10/02/Session-Management-in-Java/</id>
    <published>2018-10-02T06:16:04.000Z</published>
    <updated>2018-10-09T09:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目录"><a href="#1-目录" class="headerlink" title="1. 目录"></a>1. 目录</h1><!-- TOC --><ul><li><a href="#1-目录">1. 目录</a></li><li><a href="#2-什么是session">2. 什么是Session</a></li><li><a href="#3-java中的会话管理--cookies">3. Java中的会话管理 -Cookies</a></li><li><a href="#4-session-in-java--httpsession">4. Session in Java -HttpSession</a><ul><li><a href="#41-理解-jsessionid-cookie">4.1. 理解 JSESSIONID Cookie</a></li></ul></li><li><a href="#5-session-management-in-java-servlet--url-rewriting">5. Session Management in Java Servlet – URL Rewriting</a></li><li><a href="#6-参考文档">6. 参考文档</a></li></ul><!-- /TOC --><p>本文旨在解释使用不同技术和示例程序的servlet中的会话管理。</p><h1 id="2-什么是Session"><a href="#2-什么是Session" class="headerlink" title="2. 什么是Session"></a>2. 什么是Session</h1><p>HTTP协议和Web服务器是无状态的，这意味着对于Web服务器而言，每个请求都是一个新的处理请求，并且无法识别它是否来自之前已发送请求的客户端。 但有时在Web应用程序中，我们应该知道客户端是谁并相应地处理请求。 例如，购物车应用程序应该知道谁正在发送物品的请求以及在哪个购物车中添加物品或者谁正在发送结账请求，以便它可以向正确的客户收取金额。</p><p><strong>Session</strong>是客户端和服务器之间的转换状态，它可以包含客户端和服务器之间的多个请求和响应。 由于HTTP和Web Server都是无状态的，因此维护会话的唯一方法是在每个请求和响应中在服务器和客户端之间传递关于会话（会话ID）的一些唯一信息。</p><p>我们可以通过多种方式在请求和响应中提供唯一标识符:</p><ol><li><p><strong>User Authentication</strong> - 这是一种非常常见的方式，通过我们用户从登录页面提供身份验证凭据，然后我们可以在服务器和客户端之间传递身份验证信息以维护会话。 这不是一种非常有效的方法，因为如果同一用户从不同的浏览器登录，它将无法工作。</p></li><li><p><strong>HTML Hidden Field</strong> - 我们可以在HTML中创建一个唯一的隐藏字段，当用户开始导航时，我们可以将其值设置为对用户唯一并跟踪会话。 此方法不能与链接一起使用，因为每次从具有隐藏字段的客户端到服务器发出请求时，它都需要提交表单。 它也不安全，因为我们可以从HTML源获取隐藏的字段值并使用它来破解会话。</p></li><li><p><strong>URL Rewriting</strong> - 我们可以为每个请求和响应附加会话标识符参数，以跟踪会话。这非常繁琐，因为我们需要在每个响应中跟踪此参数，并确保它不与其他参数冲突。</p></li><li><p><strong>Cookies</strong> - Cookie是Web服务器在响应标头中发送并存储在浏览器Cookie中的一小段信息。 当客户端进一步请求时，它会将cookie添加到请求标头中，我们可以利用它来跟踪会话。 我们可以使用cookie维护会话，但如果客户端禁用cookie，则它将无效。</p></li></ol><p>5.<strong>Session Management API</strong> - 会话管理API建立在上述会话跟踪方法之上。 上述所有方法的一些主要缺点是：</p><ul><li><p>大多数情况下，我们不希望仅跟踪会话，我们必须将一些数据存储到我们可以在将来的请求中使用的会话中。如果我们尝试实现这一点，这将需要很多努力。</p></li><li><p>上述所有方法本身并不完整，所有这些方法都不适用于特定场景。因此，我们需要一种能够利用这些会话跟踪方法在所有情况下提供会话管理的解决方案；</p></li></ul><p>这就是我们需要会话管理API和J2EE Servlet技术的原因，我们可以使用会话管理API。</p><h1 id="3-Java中的会话管理-Cookies"><a href="#3-Java中的会话管理-Cookies" class="headerlink" title="3. Java中的会话管理 -Cookies"></a>3. Java中的会话管理 -Cookies</h1><p>Cookie会在Web应用程序中大量使用，以根据你的选择个性化响应或跟踪会话。 在继续使用Servlet会话管理API之前，我想展示如何通过一个小型Web应用程序跟踪cookie的会话。</p><p><img src="/2018/10/02/Session-Management-in-Java/Servlet-Cookie-Example-Project.png" alt="文件结构"><br>Web应用程序的部署描述符web.xml是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletCookieExample<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们的应用程序的欢迎页面是login.html，我们将从用户获取身份验证详细信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"US-ASCII"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"LoginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是LoginServlet负责登录请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LoginServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String userID = <span class="string">"Pankaj"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String password = <span class="string">"journaldev"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get request parameters for userID and password</span></span><br><span class="line">String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(userID.equals(user) &amp;&amp; password.equals(pwd))&#123;</span><br><span class="line">Cookie loginCookie = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>,user);</span><br><span class="line"><span class="comment">//setting cookie to expiry in 30 mins</span></span><br><span class="line">loginCookie.setMaxAge(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(loginCookie);</span><br><span class="line">response.sendRedirect(<span class="string">"LoginSuccess.jsp"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">RequestDispatcher rd = getServletContext().getRequestDispatcher(<span class="string">"/login.html"</span>);</span><br><span class="line">PrintWriter out= response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;font color=red&gt;Either user name or password is wrong.&lt;/font&gt;"</span>);</span><br><span class="line">rd.include(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们为响应设置的cookie，然后将其转发到LoginSuccess.jsp，此cookie将用于跟踪会话。 另请注意，cookie超时设置为30分钟。 理想情况下，应该有一个复杂的逻辑来设置会话跟踪的cookie值，以便它不会与任何其他请求冲突。</p><p>以下是LoginSuccess.jsp的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=US-ASCII"</span></span><br><span class="line">    pageEncoding=<span class="string">"US-ASCII"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=US-ASCII"</span>&gt;</span><br><span class="line">        &lt;title&gt;Login Success Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        String userName = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"user"</span>)) userName = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userName == <span class="keyword">null</span>) response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;h3&gt;Hi &lt;%=userName %&gt;, Login successful.&lt;/h3&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;form action=<span class="string">"LogoutServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Logout"</span> &gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果我们尝试直接访问JSP，它会将我们转发到登录页面。当我们点击Logout按钮时，我们应确保从客户端浏览器中删除cookie。</p><p>以下是LogoutServlet.jsp的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LogoutServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LogoutServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    Cookie loginCookie = <span class="keyword">null</span>;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"user"</span>))&#123;</span><br><span class="line">    loginCookie = cookie;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(loginCookie != <span class="keyword">null</span>)&#123;</span><br><span class="line">    loginCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        response.addCookie(loginCookie);</span><br><span class="line">    &#125;</span><br><span class="line">    response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有删除cookie的方法，但我们可以将最大年龄设置为0，以便立即从客户端浏览器中删除它。<br>下图显示了我们的Web应用程序的执行情况。</p><p><img src="/2018/10/02/Session-Management-in-Java/ServletCookie-login.png" alt="cookie登录"><br><img src="/2018/10/02/Session-Management-in-Java/ServletCookie-login-success-450x182.png" alt="登录成功"></p><h1 id="4-Session-in-Java-HttpSession"><a href="#4-Session-in-Java-HttpSession" class="headerlink" title="4. Session in Java -HttpSession"></a>4. Session in Java -HttpSession</h1><p>Servlet API通过HttpSession接口提供会话管理。我们可以使用以下方法从HttpServletRequest对象获取会话。 HttpSession允许我们将对象设置为可在将来的请求中检索的属性。</p><ol><li><em>HttpSession getSession()</em> - 此方法始终返回HttpSession对象。它返回随请求附加的会话对象，如果请求没有附加会话，则它创建一个新会话并返回它。</li><li><em>HttpSession getSession(boolean flag)</em> - 如果请求具有会话，则此方法返回HttpSession对象，否则返回null。</li></ol><p>HttpSession的一些重要方法是：</p><ol><li><em>String getId()</em> - 返回包含分配给此会话的唯一标识符的字符串。</li><li><em>Object getAttribute(String name)</em> - 返回在此会话中使用指定名称绑定的对象，如果名称下没有绑定任何对象，则返回null。 使用Session属性的其他一些方法是getAttributeNames（），removeAttribute（String name）和setAttribute（String name，Object value）。</li><li><em>long getCreationTime()</em> - 返回创建此会话的时间，以格林威治标准时间1970年1月1日午夜以来的毫秒数为单位。我们可以使用getLastAccessedTime（）方法获取上次访问的时间。</li><li><em>setMaxInactiveInterval(int interval)</em> - 指定servlet容器使此会话失效之前的客户端请求之间的时间（以秒为单位）。我们可以从getMaxInactiveInterval（）方法获取会话超时值。</li><li><em>ServletContext getServletContext()</em> - 返回应用程序的ServletContext对象。</li><li><em>boolean isNew()</em> - 如果客户端尚未了解会话或客户端选择不加入会话，则返回true。</li><li><em>void invalidate()</em> - 使此会话无效，然后取消绑定绑定到它的任何对象。</li></ol><h2 id="4-1-理解-JSESSIONID-Cookie"><a href="#4-1-理解-JSESSIONID-Cookie" class="headerlink" title="4.1. 理解 JSESSIONID Cookie"></a>4.1. 理解 JSESSIONID Cookie</h2><p>当我们使用HttpServletRequest getSession（）方法并创建一个新请求时，它会创建新的HttpSession对象，并将Cookie添加到响应对象，名称为JSESSIONID，值为会话ID。 此cookie用于在来自客户端的进一步请求中标识HttpSession对象。 如果在客户端禁用了cookie并且我们正在使用URL重写，则此方法使用请求URL中的jsessionid值来查找相应的会话。 JSESSIONID cookie用于会话跟踪，因此我们不应将其用于我们的应用程序目的，以避免任何与会话相关的问题。</p><p><img src="/2018/10/02/Session-Management-in-Java/Servlet-HttpSession-Example-Project.png" alt=""></p><p>login.html与之前的示例相同，并在web.xml中定义为应用程序的欢迎页面。<br>LoginServlet servlet将创建会话并设置我们可以在其他资源或将来的请求中使用的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LoginServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String userID = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get request parameters for userID and password</span></span><br><span class="line">String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(userID.equals(user) &amp;&amp; password.equals(pwd))&#123;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"user"</span>, <span class="string">"Pankaj"</span>);</span><br><span class="line"><span class="comment">//setting session to expiry in 30 mins</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">Cookie userName = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>, user);</span><br><span class="line">userName.setMaxAge(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(userName);</span><br><span class="line">response.sendRedirect(<span class="string">"LoginSuccess.jsp"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">RequestDispatcher rd = getServletContext().getRequestDispatcher(<span class="string">"/login.html"</span>);</span><br><span class="line">PrintWriter out= response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;font color=red&gt;Either user name or password is wrong.&lt;/font&gt;"</span>);</span><br><span class="line">rd.include(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our LoginSuccess.jsp code is given below.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=US-ASCII"</span></span><br><span class="line">    pageEncoding=<span class="string">"US-ASCII"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=US-ASCII"</span>&gt;</span><br><span class="line">        &lt;title&gt;Login Success Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        <span class="comment">//allow access only if session exists</span></span><br><span class="line">        String user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> user = (String) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        String userName = <span class="keyword">null</span>;</span><br><span class="line">        String sessionID = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"user"</span>)) userName = cookie.getValue();</span><br><span class="line">                <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"JSESSIONID"</span>)) sessionID = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;h3&gt;Hi &lt;%=userName %&gt;, Login successful. Your Session ID=&lt;%=sessionID %&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        User=&lt;%=user %&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;a href="CheckoutPage.jsp"&gt;Checkout Page&lt;/a&gt;</span><br><span class="line">        &lt;form action=<span class="string">"LogoutServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Logout"</span> &gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当使用JSP资源时，容器会自动为其创建会话，因此我们无法检查会话是否为null以确保用户是否已通过登录页面，因此我们使用会话属性来验证请求。</p><p>CheckoutPage.jsp是另一个页面，它的代码如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=US-ASCII"</span></span><br><span class="line">    pageEncoding=<span class="string">"US-ASCII"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=US-ASCII"</span>&gt;</span><br><span class="line">        &lt;title&gt;Login Success Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        <span class="comment">//allow access only if session exists</span></span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String userName = <span class="keyword">null</span>;</span><br><span class="line">        String sessionID = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"user"</span>)) userName = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;h3&gt;Hi &lt;%=userName %&gt;, do the checkout.&lt;/h3&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;form action=<span class="string">"LogoutServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Logout"</span> &gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们的LogoutServlet代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LogoutServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LogoutServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"JSESSIONID"</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">"JSESSIONID="</span>+cookie.getValue());</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//invalidate the session if exists</span></span><br><span class="line">    HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">    System.out.println(<span class="string">"User="</span>+session.getAttribute(<span class="string">"user"</span>));</span><br><span class="line">    <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">    response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，我在日志中打印JSESSIONID cookie值，您可以检查服务器日志，它将在LoginSuccess.jsp中打印与Session Id相同的值。<br>下图显示了我们的Web应用程序的执行情况。</p><p><img src="/2018/10/02/Session-Management-in-Java/HttpSession-Login-Page.png" alt=""><br><img src="/2018/10/02/Session-Management-in-Java/HttpSession-LoginSuccess-Page-450x133.png" alt=""><br><img src="/2018/10/02/Session-Management-in-Java/HttpSession-Checkout-Page.png" alt=""></p><h1 id="5-Session-Management-in-Java-Servlet-–-URL-Rewriting"><a href="#5-Session-Management-in-Java-Servlet-–-URL-Rewriting" class="headerlink" title="5. Session Management in Java Servlet – URL Rewriting"></a>5. Session Management in Java Servlet – URL Rewriting</h1><p>正如我们在上一节中看到的那样，我们可以使用HttpSession管理会话但是如果我们在浏览器中禁用cookie，它将无法工作，因为服务器不会从客户端接收JSESSIONID cookie。</p><p>Servlet API为URL重写提供支持，在这种情况下我们可以使用它来管理会话。 最好的部分是从编码的角度来看，它非常容易使用并涉及一步 - 编码URL。 Servlet URL编码的另一个好处是它是一种后备方法，只有在禁用浏览器cookie时它才能启动。</p><p>我们可以使用HttpServletResponse encodeURL（）方法对URL进行编码，如果我们必须将请求重定向到另一个资源并且我们想要提供会话信息，我们可以使用encodeRedirectURL（）方法。</p><p>我们将创建一个类似于上面的项目，除了我们将使用URL重写方法确保会话管理工作正常，即使在浏览器中禁用了cookie。 eclipse中的ServletSessionURLRewriting项目结构如下图所示。</p><p><img src="/2018/10/02/Session-Management-in-Java/Servlet-Session-URL-Rewriting-Project.png" alt=""></p><p>LoginServlet.java如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LoginServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String userID = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get request parameters for userID and password</span></span><br><span class="line">String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(userID.equals(user) &amp;&amp; password.equals(pwd))&#123;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"user"</span>, <span class="string">"Pankaj"</span>);</span><br><span class="line"><span class="comment">//setting session to expiry in 30 mins</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line">Cookie userName = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>, user);</span><br><span class="line">response.addCookie(userName);</span><br><span class="line"><span class="comment">//Get the encoded URL string</span></span><br><span class="line">String encodedURL = response.encodeRedirectURL(<span class="string">"LoginSuccess.jsp"</span>);</span><br><span class="line">response.sendRedirect(encodedURL);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">RequestDispatcher rd = getServletContext().getRequestDispatcher(<span class="string">"/login.html"</span>);</span><br><span class="line">PrintWriter out= response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;font color=red&gt;Either user name or password is wrong.&lt;/font&gt;"</span>);</span><br><span class="line">rd.include(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginSuccess.jsp的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=US-ASCII"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"US-ASCII"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=US-ASCII"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Success Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //<span class="attr">allow</span> <span class="attr">access</span> <span class="attr">only</span> <span class="attr">if</span> <span class="attr">session</span> <span class="attr">exists</span></span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">user</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">if</span>(<span class="attr">session.getAttribute</span>("<span class="attr">user</span>") == <span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">response.sendRedirect</span>("<span class="attr">login.html</span>");</span></span><br><span class="line"><span class="tag">        &#125;<span class="attr">else</span> <span class="attr">user</span> = <span class="string">(String)</span> <span class="attr">session.getAttribute</span>("<span class="attr">user</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">userName</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">String</span> <span class="attr">sessionID</span> = <span class="string">null;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Cookie</span>[] <span class="attr">cookies</span> = <span class="string">request.getCookies();</span></span></span><br><span class="line"><span class="tag">        <span class="attr">if</span>(<span class="attr">cookies</span> !=<span class="string">null)&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">for</span>(<span class="attr">Cookie</span> <span class="attr">cookie</span> <span class="attr">:</span> <span class="attr">cookies</span>)&#123;</span></span><br><span class="line"><span class="tag">                <span class="attr">if</span>(<span class="attr">cookie.getName</span>()<span class="attr">.equals</span>("<span class="attr">user</span>")) <span class="attr">userName</span> = <span class="string">cookie.getValue();</span></span></span><br><span class="line"><span class="tag">                <span class="attr">if</span>(<span class="attr">cookie.getName</span>()<span class="attr">.equals</span>("<span class="attr">JSESSIONID</span>")) <span class="attr">sessionID</span> = <span class="string">cookie.getValue();</span></span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        &#125;<span class="attr">else</span>&#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">sessionID</span> = <span class="string">session.getId();</span></span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hi <span class="tag">&lt;<span class="name">%=userName</span> %&gt;</span>, Login successful. Your Session ID=<span class="tag">&lt;<span class="name">%=sessionID</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        User=<span class="tag">&lt;<span class="name">%=user</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- need to encode all the URLs where we want session information to be passed --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=response.encodeURL("</span><span class="attr">CheckoutPage.jsp</span>") %&gt;</span>"&gt;Checkout Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&lt;%=response.encodeURL("</span><span class="attr">LogoutServlet</span>") %&gt;</span>" method="post"&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Logout"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>LogoutServlet.java的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.servlet.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LogoutServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LogoutServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"JSESSIONID"</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">"JSESSIONID="</span>+cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//invalidate the session if exists</span></span><br><span class="line">    HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">    System.out.println(<span class="string">"User="</span>+session.getAttribute(<span class="string">"user"</span>));</span><br><span class="line">    <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//no encoding because we have invalidated the session</span></span><br><span class="line">    response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们运行此项目时，在浏览器中禁用cookie，下面的图像显示响应页面，注意浏览器地址栏的URL中的jsessionid。 另请注意，在LoginSuccess页面上，用户名为null，因为浏览器未在最后一个响应中发送cookie发送。</p><p><img src="/2018/10/02/Session-Management-in-Java/Servlet-URL-Rewriting-Login-Page.png" alt=""><br><img src="/2018/10/02/Session-Management-in-Java/Servlet-URL-Rewriting-LoginSuccess-Page-450x113.png" alt=""><br><img src="/2018/10/02/Session-Management-in-Java/Servlet-URL-Rewriting-Checkout-Page-450x106.png" alt=""></p><p>如果未禁用cookie，则不会在URL中看到jsessionid，因为在这种情况下Servlet会话API将使用cookie。</p><h1 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6. 参考文档"></a>6. 参考文档</h1><p><a href="https://www.journaldev.com/1907/java-session-management-servlet-httpsession-url-rewriting" target="_blank" rel="noopener">Session Management in Java – HttpServlet, Cookies, URL Rewriting</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-目录&quot;&gt;&lt;a href=&quot;#1-目录&quot; class=&quot;headerlink&quot; title=&quot;1. 目录&quot;&gt;&lt;/a&gt;1. 目录&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-目录&quot;&gt;1. 目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java EE(1) - Servelt in Java EE</title>
    <link href="http://yoursite.com/2018/10/02/Servelt-in-Java-EE/"/>
    <id>http://yoursite.com/2018/10/02/Servelt-in-Java-EE/</id>
    <published>2018-10-02T01:55:22.000Z</published>
    <updated>2018-10-09T09:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目录"><a href="#1-目录" class="headerlink" title="1. 目录"></a>1. 目录</h1><!-- TOC --><ul><li><a href="#1-目录">1. 目录</a></li><li><a href="#2-servlet是什么">2. Servlet是什么？</a></li><li><a href="#3-servlet的运行过程">3. Servlet的运行过程</a></li><li><a href="#4-调用图声明周期">4. 调用图&amp;声明周期</a></li><li><a href="#5-servlet的api">5. servlet的API</a><ul><li><a href="#51-servlet-interface">5.1. Servlet Interface</a></li><li><a href="#52-servletconfig-interface">5.2. ServletConfig Interface</a></li><li><a href="#53-servletcontext-interface">5.3. ServletContext Interface</a></li><li><a href="#54-servletrequest-interface">5.4. ServletRequest Interface</a></li><li><a href="#55-servletresponse-interface">5.5. ServletResponse Interface</a></li><li><a href="#56-servletdispathcer-interface">5.6. ServletDispathcer Interface</a></li><li><a href="#57-genericservlet-class">5.7. GenericServlet class</a></li><li><a href="#58-httpservlet-class">5.8. HttpServlet class</a></li></ul></li><li><a href="#6-servlet属性">6. Servlet属性</a></li><li><a href="#7-annotations-in-servlet3">7. Annotations in Servlet3</a></li><li><a href="#8-参考文档">8. 参考文档</a></li></ul><!-- /TOC --><h1 id="2-Servlet是什么？"><a href="#2-Servlet是什么？" class="headerlink" title="2. Servlet是什么？"></a>2. Servlet是什么？</h1><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><ul><li>Servlet在处理时间，内存利用率方面提供了更好的性能，因为servlet使用多线程的好处，并且为每个请求创建一个新线程，这比使用CGI为每个请求加载创建新Object更快。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>Servlet是健壮的，因为容器负责servlet的生命周期，我们不需要担心内存泄漏，安全性，垃圾收集等。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul><h1 id="3-Servlet的运行过程"><a href="#3-Servlet的运行过程" class="headerlink" title="3. Servlet的运行过程"></a>3. Servlet的运行过程</h1><p>Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后:</p><pre><code>1. Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第4步，否则，执行第2步. 2. 装载并创建该Servlet的一个实例对象。 3. 调用Servlet实例对象的init()方法。 4. 创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去。 5. WEB应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。</code></pre><p>详细过程可见:<a href="https://www.cnblogs.com/xdp-gacl/p/3760336.html" target="_blank" rel="noopener">javaweb学习总结(五)——Servlet开发(一)</a></p><h1 id="4-调用图-amp-声明周期"><a href="#4-调用图-amp-声明周期" class="headerlink" title="4. 调用图&amp;声明周期"></a>4. 调用图&amp;声明周期</h1><p><img src="/2018/10/02/Servelt-in-Java-EE/1.png" alt="Servlet调用图"><br>通过上图可以总结出，servlet执行以下主要任务：</p><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h1 id="5-servlet的API"><a href="#5-servlet的API" class="headerlink" title="5. servlet的API"></a>5. servlet的API</h1><p><img src="/2018/10/02/Servelt-in-Java-EE/Servlet-Hierarchy.png" alt="Servlet API"><br>如图所示，javax.servlet.Servlet是Servlet API的基础接口，同时还包括ServletContext，RequestDispatcher，ServletRequest，ServletResponse等。</p><h2 id="5-1-Servlet-Interface"><a href="#5-1-Servlet-Interface" class="headerlink" title="5.1. Servlet Interface"></a>5.1. Servlet Interface</h2><p>Servlet接口声明了servlet的生命周期方法。所有servlet类都需要实现此接口。此接口中声明的方法是：</p><ol><li><p><em>public abstract void init(ServletConfig paramServletConfig) throws ServletException</em>: 这是servlet容器调用以初始化servlet和ServletConfig参数的非常重要的方法。 除非init（）方法执行完毕，否则servlet尚未准备好处理客户机请求。 此方法在servlet生命周期中仅调用一次，并使Servlet类与普通java对象不同。 我们可以在servlet类中扩展此方法来初始化资源，例如DB Connection，Socket连接等。</p></li><li><p><em>public abstract ServletConfig getServletConfig()</em>： 此方法返回一个servlet配置对象，该对象包含此servlet的任何初始化参数和启动配置。 我们可以使用这个方法来获取部署描述符（web.xml）中的servlet定义的init参数，或者通过Servlet 3中的注释来获取。稍后我们将研究ServletConfig接口。</p></li><li><p><em>public abstract void service(ServletRequest req, ServletResponse res) throws ServletException, IOException</em>： 此方法负责处理客户端请求。 每当servlet容器收到任何请求时，它都会创建一个新线程并通过将请求和响应作为参数传递来执行service（）方法。 Servlet通常在多线程环境中运行，因此开发人员有责任使用同步保持共享资源的线程安全。</p></li><li><p><em>public abstract String getServletInfo()</em>： 此方法返回包含有关servlet的信息的字符串，例如其作者，版本和版权。返回的字符串应该是纯文本，不能有标记。</p></li><li><p><em>public abstract void destroy()</em>： 此方法只能在servlet生命周期中调用一次，并用于关闭任何打开的资源。这就像java类的finalize方法。</p></li></ol><h2 id="5-2-ServletConfig-Interface"><a href="#5-2-ServletConfig-Interface" class="headerlink" title="5.2. ServletConfig Interface"></a>5.2. ServletConfig Interface</h2><p>javax.servlet.ServletConfig用于将配置信息传递给Servlet。 每个servlet都有自己的ServletConfig对象，servlet容器负责实例化这个对象。 我们可以在web.xml文件中或通过使用WebInitParam注释提供servlet init参数。 我们可以使用getServletConfig（）方法来获取servlet的ServletConfig对象。</p><p>ServletConfig接口的重要方法是：</p><ol><li><p><em>public abstract ServletContext getServletContext()</em>： 此方法返回servlet的ServletContext对象。我们将在下一节中研究ServletContext接口。</p></li><li><p><em>public abstract Enumeration<string> getInitParameterNames()</string></em>：此方法返回为servlet定义的init参数名称的Enumeration <string>。如果没有定义init参数，则此方法返回空枚举。</string></p></li><li><p><em>public abstract String getInitParameter(String paramString)</em>: 此方法可用于按名称获取特定的init参数值。如果参数不与名称一起出现，则返回null。</p></li></ol><h2 id="5-3-ServletContext-Interface"><a href="#5-3-ServletContext-Interface" class="headerlink" title="5.3. ServletContext Interface"></a>5.3. ServletContext Interface</h2><p>javax.servlet.ServletContext接口提供对servlet的Web应用程序变量的访问。 ServletContext是唯一对象，可供Web应用程序中的所有servlet使用。 当我们希望一些init参数可用于Web应用程序中的多个或所有servlet时，我们可以使用ServletContext对象并使用<context-param>元素在web.xml中定义参数。 我们可以通过ServletConfig的getServletContext（）方法获取ServletContext对象。 Servlet引擎还可以提供对一组servlet唯一的上下文对象，并且该上下文对象与主机的URL路径命名空间的特定部分相关联。</context-param></p><p>ServletContext的一些重要方法是：</p><ol><li><p><em>public abstract ServletContext getContext(String uripath)</em>: 此方法返回特定uripath的ServletContext对象，如果不可用或servlet不可见，则返回null。</p></li><li><p><em>public abstract URL getResource(String path) throws MalformedURLException</em>: 此方法返回URL对象，允许访问所请求的任何内容资源。 我们可以访问项目，无论它们驻留在本地文件系统，远程文件系统，数据库还是远程网络站点，而不知道如何获取资源的具体细节。</p></li><li><p><em>public abstract InputStream getResourceAsStream(String path)</em>： 此方法将输入流返回给定资源路径，如果未找到则返回null。</p></li><li><p><em>public abstract RequestDispatcher getRequestDispatcher(String urlpath)</em>： 此方法主要用于获取对另一个servlet的引用。获取RequestDispatcher后，servlet程序员将请求转发给目标组件或包含来自它的内容</p></li><li><p><em>public abstract void log(String msg)</em>： 此方法用于将给定的消息字符串写入servlet日志文件。</p></li><li><p><em>public abstract Object getAttribute(String name)</em>： 返回给定名称的object属性。我们可以使用公共抽象Enumeration <string> getAttributeNames（）方法获取所有属性的枚举。</string></p></li><li><p><em>public abstract void setAttribute(String paramString, Object paramObject)</em>： 此方法用于设置具有应用程序范围的属性。 有权访问此ServletContext的所有其他servlet都可以访问该属性。 我们可以使用public abstract void removeAttribute（String paramString）方法删除属性。</p></li><li><p><em>String getInitParameter(String name)</em>： 此方法返回在web.xml中使用name定义的init参数的String值，如果参数名称不存在，则返回null。我们可以使用Enumeration <string> getInitParameterNames（）来获取所有init参数名称的枚举。</string></p></li><li><p><em>boolean setInitParameter(String paramString1, String paramString2)</em>： 我们可以使用此方法为应用程序设置init参数。</p></li></ol><h2 id="5-4-ServletRequest-Interface"><a href="#5-4-ServletRequest-Interface" class="headerlink" title="5.4. ServletRequest Interface"></a>5.4. ServletRequest Interface</h2><p>ServletRequest接口用于向servlet提供客户机请求信息。 Servlet容器从客户端请求创建ServletRequest对象，并将其传递给servlet service（）方法进行处理。</p><p>ServletRequest接口的一些重要方法是：</p><ol><li><p><em>Object getAttribute(String name)</em>： 此方法将named属性的值作为Object返回，如果不存在则返回null。 我们可以使用getAttributeNames（）方法来获取请求的属性名称的枚举。 此界面还提供了设置和删除属性的方法。</p></li><li><p><em>String getParameter(String name)</em>： 此方法将请求参数作为String返回。我们可以使用getParameterNames（）方法获取请求的参数名称的枚举。</p></li><li><p><em>String getServerName()</em>： 返回服务器的主机名。</p></li><li><p><em>int getServerPort()</em>：返回正在侦听的服务器的端口号。</p></li></ol><p>ServletRequest的子接口是HttpServletRequest，它包含一些其他用于会话管理，cookie和请求授权的方法。</p><h2 id="5-5-ServletResponse-Interface"><a href="#5-5-ServletResponse-Interface" class="headerlink" title="5.5. ServletResponse Interface"></a>5.5. ServletResponse Interface</h2><p>servlet使用ServletResponse接口向客户端发送响应。 Servlet容器创建ServletResponse对象并将其传递给servlet service（）方法，然后使用响应对象为客户端生成HTML响应。<br>HttpServletResponse中的一些重要方法是：</p><ol><li><p><em>void addCookie(Cookie cookie)</em>：用于向响应添加cookie</p></li><li><p><em>void addHeader(String name, String value)</em>： 用于添加具有给定名称和值的响应标头。</p></li><li><p><em>String encodeURL(java.lang.String url)</em>： 通过在其中包含会话ID来对指定的URL进行编码，或者，如果不需要编码，则返回不变的URL。</p></li><li><p><em>String getHeader(String name)</em>： 返回指定标头的值，如果尚未设置此标头，则返回null。</p></li><li><p><em>void sendRedirect(String location)</em>：用于使用指定的重定向位置URL向客户端发送临时重定向响应。</p></li><li><p><em>void setStatus(int sc)</em>： 用于设置响应的状态代码。</p></li></ol><h2 id="5-6-ServletDispathcer-Interface"><a href="#5-6-ServletDispathcer-Interface" class="headerlink" title="5.6. ServletDispathcer Interface"></a>5.6. ServletDispathcer Interface</h2><p>RequestDispatcher接口用于将请求转发到另一个资源，该资源可以是同一上下文中的HTML，JSP或其他servlet。 我们还可以使用它将另一个资源的内容包含在响应中。 此接口用于同一上下文中的servlet通信。</p><p>此接口中定义了两种方法：</p><ol><li><p><em>void forward(ServletRequest request, ServletResponse response)</em>： 将请求从servlet转发到服务器上的另一个资源（servlet，JSP文件或HTML文件）。</p></li><li><p><em>void include(ServletRequest request, ServletResponse response)</em>： 包括响应中的资源（servlet，JSP页面，HTML文件）的内容。</p></li></ol><p>我们可以使用ServletContext getRequestDispatcher（String path）方法在servlet中获取RequestDispatcher。路径必须以/开头，并且被解释为相对于当前上下文根。</p><h2 id="5-7-GenericServlet-class"><a href="#5-7-GenericServlet-class" class="headerlink" title="5.7. GenericServlet class"></a>5.7. GenericServlet class</h2><p>GenericServlet是一个实现Servlet，ServletConfig和Serializable接口的抽象类。 GenericServlet提供了所有Servlet生命周期方法和ServletConfig方法的默认实现，并且在扩展此类时使我们的生活更轻松，我们只需要覆盖我们想要的方法，其余的我们可以使用默认实现。 此类中定义的大多数方法仅用于轻松访问Servlet和ServletConfig接口中定义的公共方法。 GenericServlet类中一个重要的方法是无参数的init（）方法，如果我们必须在处理来自servlet的任何请求之前初始化一些资源，我们应该在servlet程序中覆盖这个方法。</p><h2 id="5-8-HttpServlet-class"><a href="#5-8-HttpServlet-class" class="headerlink" title="5.8. HttpServlet class"></a>5.8. HttpServlet class</h2><p>HTTPServlet是一个抽象类，它扩展了GenericServlet，并为创建基于HTTP的Web应用程序提供了基础。有些方法被子类重写为不同的HTTP方法。</p><ol><li>doGet(), for HTTP GET requests</li><li>doPost(), for HTTP POST requests</li><li>doPut(), for HTTP PUT requests</li><li>doDelete(), for HTTP DELETE requests</li></ol><h1 id="6-Servlet属性"><a href="#6-Servlet属性" class="headerlink" title="6. Servlet属性"></a>6. Servlet属性</h1><p>Servlet属性用于servlet间通信，我们可以在Web应用程序中设置，获取和删除属性。 servlet属性有三个范围 - 请求范围，会话范围和应用程序范围。 ServletRequest，HttpSession和ServletContext接口提供了分别从请求，会话和应用程序范围获取/设置/删除属性的方法。 Servlet属性与web.xml中为ServletConfig或ServletContext定义的init参数不同。</p><h1 id="7-Annotations-in-Servlet3"><a href="#7-Annotations-in-Servlet3" class="headerlink" title="7. Annotations in Servlet3"></a>7. Annotations in Servlet3</h1><p>在Servlet 3之前，所有servlet映射及其init参数都用于在web.xml中定义，当应用程序中的servlet数量巨大时，这不方便且更容易出错。 Servlet 3引入了使用java注释来定义servlet，过滤器和监听器servlet以及init参数。</p><p>一些重要的Servlet注释是：</p><ol><li><strong>WebServlet</strong>:我们可以将这个注释与Servlet类一起使用来定义init参数，loadOnStartup值，描述和url模式等。必须在注释的value或urlPattern属性中声明至少一个URL模式，但不能同时在两者中声明。 声明此批注的类必须扩展HttpServlet。</li><li><strong>WebInitParam</strong>:这个注释用于定义servlet或filter的init参数，它包含名称，值对，我们也可以提供描述。此批注可以在WebFilter或WebServlet批注中使用。</li><li><strong>WebFilter</strong>:此批注用于声明servlet过滤器。 该注释在部署期间由容器处理，其中找到它的Filter类将根据配置创建并应用于URL模式，Servlet和DispatcherTypes。 带注释的类必须实现javax.servlet.Filter接口。</li><li><strong>WebListener</strong>:用于在给定Web应用程序上下文中为各种类型的事件声明侦听器的注释。</li></ol><h1 id="8-参考文档"><a href="#8-参考文档" class="headerlink" title="8. 参考文档"></a>8. 参考文档</h1><ol><li><a href="https://www.journaldev.com/1877/servlet-tutorial-java" target="_blank" rel="noopener">servlet-tutorial-java</a></li><li><a href="https://www.cnblogs.com/xdp-gacl/p/3760336.html" target="_blank" rel="noopener">javaweb学习总结(五)——Servlet开发(一)</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-目录&quot;&gt;&lt;a href=&quot;#1-目录&quot; class=&quot;headerlink&quot; title=&quot;1. 目录&quot;&gt;&lt;/a&gt;1. 目录&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-目录&quot;&gt;1. 目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dive into AbstractQueuedSynchronizer</title>
    <link href="http://yoursite.com/2018/09/27/aqs-md/"/>
    <id>http://yoursite.com/2018/09/27/aqs-md/</id>
    <published>2018-09-27T06:09:51.000Z</published>
    <updated>2018-09-27T06:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>坑待填<br><a href="aqs.pdf">The java.util.concurrent Synchronizer Framework</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;坑待填&lt;br&gt;&lt;a href=&quot;aqs.pdf&quot;&gt;The java.util.concurrent Synchronizer Framework&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dive into FutureTask</title>
    <link href="http://yoursite.com/2018/09/19/dive-into-AbstractQueuedSynchronizer/"/>
    <id>http://yoursite.com/2018/09/19/dive-into-AbstractQueuedSynchronizer/</id>
    <published>2018-09-19T07:49:48.000Z</published>
    <updated>2018-09-20T06:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>从上一个blog上学习到了ListenableFutureTask的设计和实现（之一），其中可知，ListenableFutureTask是继承了FutureTask的。关于FutureTask，FutureTask对象可以接收其他线程的执行结果，将同步操作改为异步操作，从而提高服务的响应时间和吞吐量。FutureTask底层使用了LockSupport实现线程间的通信，那么FutureTask是如何获取其他线程的执行结果的呢？又是如何取消任务的执行的呢？</p><h2 id="1-FutureTask的成员变量-amp-静态变量"><a href="#1-FutureTask的成员变量-amp-静态变量" class="headerlink" title="1.FutureTask的成员变量&amp;静态变量"></a>1.FutureTask的成员变量&amp;静态变量</h2><p>FutureTask的初始化有以下几种方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 潜在的callable; nulled out after running */</span></span><br><span class="line"><span class="keyword">private</span> Callable&lt;V&gt; callable;</span><br><span class="line"><span class="comment">/** The result to return or exception to throw from get() */</span></span><br><span class="line"><span class="keyword">private</span> Object outcome; <span class="comment">// non-volatile, protected by state reads/writes</span></span><br><span class="line"><span class="comment">/** The thread running the callable; CASed during run() */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Thread runner;</span><br><span class="line"><span class="comment">/** Treiber stack of waiting threads */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> WaitNode waiters;</span><br></pre></td></tr></table></figure></p><p>其中FutureTask有上面几种状态，他们的转换方式如下：<br><img src="/image/futuretaskstate.webp" alt="FutureTask状态转换机"><br>其中2，3，4，6为终止状态。</p><p>其中，在调用get()方法时<strong>阻塞</strong>的线程会被构造成一个节点，加入到链表waiters中，waiters是链表的头结点（需要注意的是，并不是执行get()方法的线程都会被加入到改链表中）。<br>Waiter节点定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple linked list nodes to record waiting threads in a Treiber</span></span><br><span class="line"><span class="comment"> * stack.  See other classes such as Phaser and SynchronousQueue</span></span><br><span class="line"><span class="comment"> * for more detailed explanation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">    <span class="keyword">volatile</span> WaitNode next;</span><br><span class="line">    WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存储了线程和下一个节点信息，存储线程主要是为了知道唤醒哪一个线程。<br>从FutureTask的成员变量中可以看出，当实例化一个FutureTask对象时，必须传入一个callable对象，即便传入的是runnable对象，最终也会转变为callable对象。</p><h2 id="2-FutureTask构造函数"><a href="#2-FutureTask构造函数" class="headerlink" title="2.FutureTask构造函数"></a>2.FutureTask构造函数</h2><p>实例化FutureTask对象，必须传入callable对象，也可以传入runnable对象，其中第一种方法比较常见：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-执行FutureTask-run"><a href="#3-执行FutureTask-run" class="headerlink" title="3.执行FutureTask: run()"></a>3.执行FutureTask: run()</h2><p>线程池在调用submit()方法时，会将任务封装成一个FutureTask对象。<br>如下是run()方法的主题逻辑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 执行任务前的状态检查与设置runner线程</span></span><br><span class="line">    <span class="keyword">if</span> (state != NEW ||</span><br><span class="line">        !UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, runnerOffset,</span><br><span class="line">                                     <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//2. 执行任务</span></span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="keyword">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = c.call();</span><br><span class="line">                ran = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">                ran = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//4.异常结果</span></span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                <span class="comment">//3. 正常执行结果</span></span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">        <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">        runner = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">        <span class="comment">// leaked interrupts</span></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">            <span class="comment">//5. 处理INTERRUPTING状态，就是等待一下</span></span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>run()方法主要做了五件事情，其中主要涉及到上图中的状态转换图中的黑色内容，细节如下所示：</p><ol><li>任务运行前的状态检查<ul><li>任务状态必须为NEW，如果不为NEW，说明已经运行，直接返回；</li><li>如果任务状态为NEW，使用CAS操作设置该该任务的执行线程给runner，如果设置不成功，说明runner的值不为null，也就是说其他线程已经在执行该任务；如果设置成功，则进行后续操作。</li></ul></li><li>执行任务<ul><li>再次验证任务状态，因为其他的线程，在1，2之间可能会取消该任务，所以再次判断；</li><li>执行任务，调用callable 的 call()方法</li></ul></li><li><p>结果处理</p><ul><li>正常结果的处理代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the result of this future to the given value unless</span></span><br><span class="line"><span class="comment"> * this future has already been set or has been cancelled.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is invoked internally by the &#123;<span class="doctag">@link</span> #run&#125; method</span></span><br><span class="line"><span class="comment"> * upon successful completion of the computation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v the value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class="line">        outcome = v;</span><br><span class="line">        UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, NORMAL); <span class="comment">// final state</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>使用原子操作将状态转换成COMPLETING，表示任务执行完，但是还没给outcome（成员变量）赋值；</li><li>给outcome赋值；</li><li>使用原子操作将状态修改为normal，表示正常结束了；</li><li>完成后续操作，唤醒阻塞线程（在第四步介绍）；</li></ol></li><li>唤醒阻塞线程<ol><li>首先使用原子操作CAS移除所有的waiters，并且激活其中的thread;</li><li>依次遍历waiters中的节点，使用LockSupport.unpack()方法唤醒线程；</li><li>callable置空；</li></ol></li></ol><p><em>QUESTION</em>: 为什么要将callable置空？</p><p>源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes and signals all waiting threads, invokes done(), and</span></span><br><span class="line"><span class="comment"> * nulls out callable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert state &gt; COMPLETING;</span></span><br><span class="line">    <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">        <span class="comment">//注意是对比q 和null，如果不为q，说明已经被其他线程改变，则失败；否则，清除并唤醒waiters中所有的thread。</span></span><br><span class="line">        <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset, q, <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Thread t = q.thread;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.thread = <span class="keyword">null</span>;</span><br><span class="line">                    LockSupport.unpark(t);</span><br><span class="line">                &#125;</span><br><span class="line">                WaitNode next = q.next;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                q.next = <span class="keyword">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                q = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//跳出外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    done();</span><br><span class="line"></span><br><span class="line">    callable = <span class="keyword">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li><p>等待interrupting状态的改变<br>run()方法的finally语句块中内容，因为interrupting状态不为最终状态，等待其变为最终状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ensures that any interrupt from a possible cancel(true) is only</span></span><br><span class="line"><span class="comment"> * delivered to a task while in run or runAndReset.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlePossibleCancellationInterrupt</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// It is possible for our interrupter to stall before getting a</span></span><br><span class="line">    <span class="comment">// chance to interrupt us.  Let's spin-wait patiently.</span></span><br><span class="line">    <span class="keyword">if</span> (s == INTERRUPTING)</span><br><span class="line">        <span class="keyword">while</span> (state == INTERRUPTING)</span><br><span class="line">            Thread.yield(); <span class="comment">// wait out pending interrupt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert state == INTERRUPTED;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// We want to clear any interrupt we may have received from</span></span><br><span class="line">    <span class="comment">// cancel(true).  However, it is permissible to use interrupts</span></span><br><span class="line">    <span class="comment">// as an independent mechanism for a task to communicate with</span></span><br><span class="line">    <span class="comment">// its caller, and there is no way to clear only the</span></span><br><span class="line">    <span class="comment">// cancellation interrupt.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Thread.interrupted();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常处理<br>在run方法中，如果执行 callable.call() 的过程中出现异常时，则调用setException(ex)方法来处理异常，其中处理异常的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Causes this future to report an &#123;<span class="doctag">@link</span> ExecutionException&#125;</span></span><br><span class="line"><span class="comment"> * with the given throwable as its cause, unless this future has</span></span><br><span class="line"><span class="comment"> * already been set or has been cancelled.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is invoked internally by the &#123;<span class="doctag">@link</span> #run&#125; method</span></span><br><span class="line"><span class="comment"> * upon failure of the computation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t the cause of failure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setException</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class="line">        outcome = t;</span><br><span class="line">        UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, EXCEPTIONAL); <span class="comment">// final state</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可见，先通过原子操作CAS来讲状态更新为COMPLETING，然后将结果设置为t，然后再将状态设置为最终状态EXCEPTIONAL，并执行终止执行操作。</p><h2 id="3-获取FutureTask的结果：get"><a href="#3-获取FutureTask的结果：get" class="headerlink" title="3.获取FutureTask的结果：get()"></a>3.获取FutureTask的结果：get()</h2><p>FutureTask提供了两种获取任务结果的方法：</p><ol><li>get()阻塞方法，会一直阻塞到任务执行完成，才会返回；</li><li>get(long timeout, TimeUtil unit)方法，最长阻塞timeout时间，以便任务没有完成，也会返回；</li></ol><p>get()方法主要做了两件事情：</p><ol><li>判断任务状态，如果不为四种状态（可见状态排序），则执行awaitDone()方法；</li><li>任务结束，返回任务结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> CancellationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = state;</span><br><span class="line">    <span class="keyword">if</span> (s &lt;= COMPLETING)</span><br><span class="line">        s = awaitDone(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    <span class="keyword">return</span> report(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> CancellationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (unit == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> s = state;</span><br><span class="line">    <span class="keyword">if</span> (s &lt;= COMPLETING &amp;&amp;</span><br><span class="line">        (s = awaitDone(<span class="keyword">true</span>, unit.toNanos(timeout))) &lt;= COMPLETING)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">    <span class="keyword">return</span> report(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，主要的操作就是awaitDone()和report(s)，awaitDown()的作用是等待完成，或者在中断（或超时）时中止。<br>其中关于awaitDone()的源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Awaits completion or aborts on interrupt or timeout.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timed true if use timed waits</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nanos time to wait, if timed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> state upon completion</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">awaitDone</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> deadline = timed ? System.nanoTime() + nanos : <span class="number">0L</span>;</span><br><span class="line">    WaitNode q = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> queued = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            removeWaiter(q);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; COMPLETING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="keyword">null</span>)</span><br><span class="line">                q.thread = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == COMPLETING) <span class="comment">// cannot time out yet</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="keyword">null</span>)</span><br><span class="line">            q = <span class="keyword">new</span> WaitNode();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!queued)</span><br><span class="line">            queued = UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset,</span><br><span class="line">                                                 q.next = waiters, q);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">            nanos = deadline - System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                removeWaiter(q);</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.parkNanos(<span class="keyword">this</span>, nanos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从源码中可以看出，并不是所有的调用get()方法的线程，就会进入阻塞链表，只有在调用get()方法时，任务状态为new的线程才会加入阻塞链表waiters中，等待任务执行完唤醒。如果任务执行完了，表明结果会快就会准备好，只需要自旋等待即可。具体的过程分析如下：</p><pre><code>1. 设置超时时间（如果存在的话）；2. 定义等待节点，如果需要构造等待节点（是有条件的），则构造并赋值给q；3. queued用于标记该阻塞节点是否已经插入到了链表中，防止多次插入；4. 使用死循环进行操作，（不完成目的不罢休，达到目的才会break）；5. 判断当前线程（注意，不是runner，而是当前线程，获取任务执行结果的线程）是否被中断，如果中断，则移出该线程的阻塞节点（removeWaiter()方法，如果没有阻塞节点，该方法直接返回），并抛出中断异常6. 如果任务已经执行完成（处于中止状态），将等待节点的线程置为空，**返回**状态；7. 如果任务已经执行完，但是没有给outcome赋值，则放弃CPU资源进行等待；(无break)8. 如果任务还未执行（即状态为NEW)，且无等待节点的，则构造等待节点；(无break)9. 如果任务还没有执行，并且存在等待节点的，则将等待节点加入到等待链表waiters中，通过CAS操作采用头插入法插入节点；(无break)10. 如果设置了超时，则判断有无超时，如果没有设置超时，则阻塞此线程，等待任务执行完执行finishCompletion()方法唤醒；(无break)11. 如果设置了超时，判断有无超时，如果超时，移除等待节点，**返回**状态；12. 如果没有超时，调用LockSupport 的parkNanos()方法进行超时等待；(无break)</code></pre><p><em>QUESTION:</em> 步骤5的原理是啥？可以对应到cancel中的中断方法，如果当前线程响应中断，则移除该线程的阻塞节点，并抛出异常。</p><p>在上述方法中，存在removeWaiter()方法，整体逻辑如下：</p><ol><li>判断传入的节点是否为null，如果为null直接返回；</li><li>如果不为空，首先将thread字段置null；</li><li>死循环，删除该thread字段为null节点；</li></ol><p>源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tries to unlink a timed-out or interrupted wait node to avoid</span></span><br><span class="line"><span class="comment"> * accumulating garbage.  Internal nodes are simply unspliced</span></span><br><span class="line"><span class="comment"> * without CAS since it is harmless if they are traversed anyway</span></span><br><span class="line"><span class="comment"> * by releasers.  To avoid effects of unsplicing from already</span></span><br><span class="line"><span class="comment"> * removed nodes, the list is retraversed in case of an apparent</span></span><br><span class="line"><span class="comment"> * race.  This is slow when there are a lot of nodes, but we don't</span></span><br><span class="line"><span class="comment"> * expect lists to be long enough to outweigh higher-overhead</span></span><br><span class="line"><span class="comment"> * schemes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeWaiter</span><span class="params">(WaitNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.thread = <span class="keyword">null</span>;</span><br><span class="line">        retry:</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;          <span class="comment">// restart on removeWaiter race</span></span><br><span class="line">            <span class="keyword">for</span> (WaitNode pred = <span class="keyword">null</span>, q = waiters, s; q != <span class="keyword">null</span>; q = s) &#123;</span><br><span class="line">                s = q.next;</span><br><span class="line">                <span class="keyword">if</span> (q.thread != <span class="keyword">null</span>)</span><br><span class="line">                    pred = q;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pred.next = s;</span><br><span class="line">                    <span class="keyword">if</span> (pred.thread == <span class="keyword">null</span>) <span class="comment">// check for race</span></span><br><span class="line">                        <span class="keyword">continue</span> retry;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset,</span><br><span class="line">                                                      q, s))</span><br><span class="line">                    <span class="keyword">continue</span> retry;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其上删除逻辑就是寻找thread字段为null的节点的前节点，因为thread节点为null的就是我们要删除的节点。如果前节点存在，直接删除该节点，如果前节点不存在，说明该节点在链头，因为链表的插入操作采用的是头插法，因此，修改头结点会有线程安全问题，所以使用线程安全的CAS设置头结点的值，从而达到删除该节点的目的。如果原子操作没有删除成功，说明链表的结构发生了变化，需要重试。</p><p>get()方法中另外一个重要的方法是report(s)方法，其会根据不同的状态，返回不同的结果。源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns result or throws exception for completed task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s completed state value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">report</span><span class="params">(<span class="keyword">int</span> s)</span> <span class="keyword">throws</span> ExecutionException </span>&#123;</span><br><span class="line">    Object x = outcome;</span><br><span class="line">    <span class="keyword">if</span> (s == NORMAL)</span><br><span class="line">        <span class="keyword">return</span> (V)x;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= CANCELLED)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException((Throwable)x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-FutureTask的取消：cancel"><a href="#4-FutureTask的取消：cancel" class="headerlink" title="4.FutureTask的取消：cancel()"></a>4.FutureTask的取消：cancel()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.判断并对比状态</span></span><br><span class="line">    <span class="keyword">if</span> ((state != NEW) || !UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW,</span><br><span class="line">              mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//2.runner线程的终端操作</span></span><br><span class="line">    <span class="keyword">try</span> &#123;    <span class="comment">// in case call to interrupt throws exception</span></span><br><span class="line">        <span class="keyword">if</span> (mayInterruptIfRunning) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread t = runner;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                    t.interrupt();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123; <span class="comment">// final state</span></span><br><span class="line">                UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, INTERRUPTED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该操作对应状态转换图中的红线部分。</p><ol><li>当 mayInterruptIfRunning 为 false 时，表示cancel()方法只能响应已经提交但是还未执行的任务，其判断任务状态必须为NEW，且CAS操作将状态从NEW 置换为CANCELED成功时，会跳转到return true语句，即cancel成功；</li><li>当mayInterruptIfRunning 为true 时，前面的逻辑依旧成立，同时，cancel只能响应状态为NEW，且CAS操作将状态从NEW转换成INTERUPTING成功时，才<strong>可能</strong>完成取消操作；为何说可能呢？因为还需要执行线程响应该中断信号，如果执行线程不响应该信号，则该中断有没有是一样的，除非执行线程中存在影响中断的操作，否则，即便调用了interrupt()方法也不起任何作用；</li></ol><p>关于Java中的线程中断：可参见<a href="https://www.zhihu.com/question/41048032" target="_blank" rel="noopener">Java里一个线程调用了Thread.interrupt()到底意味着什么？</a></p><h2 id="5-辅助工具类"><a href="#5-辅助工具类" class="headerlink" title="5.辅助工具类"></a>5.辅助工具类</h2><p>使用线程安全工具Unsafe来保证线程安全的目的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unsafe mechanics</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> stateOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> runnerOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> waitersOffset;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        Class&lt;?&gt; k = FutureTask.class;</span><br><span class="line">        stateOffset = UNSAFE.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">"state"</span>));</span><br><span class="line">        runnerOffset = UNSAFE.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">"runner"</span>));</span><br><span class="line">        waitersOffset = UNSAFE.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">"waiters"</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从上一个blog上学习到了ListenableFutureTask的设计和实现（之一），其中可知，ListenableFutureTask是继承了FutureTask的。关于FutureTask，FutureTask对象可以接收其他线程的执行结果，将同步操作改为异步操作，从
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dive into ListenableFuture</title>
    <link href="http://yoursite.com/2018/09/12/Dive-into-ListenableFuture/"/>
    <id>http://yoursite.com/2018/09/12/Dive-into-ListenableFuture/</id>
    <published>2018-09-12T11:49:01.000Z</published>
    <updated>2018-09-13T08:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么要可监听的Future"><a href="#1-为什么要可监听的Future" class="headerlink" title="1.为什么要可监听的Future"></a>1.为什么要可监听的Future</h2><p>从java1.5开始，提供了Callback和Future，通过他们可以在任务执行完毕之后得到任务执行的结果。Future可以对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会阻塞直到任务返回结果。<br>在java.util.concurrent包中，它是一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，在调用get()方法获取结果时，其会一直阻塞等待，直至计算完成，取得结果（当然，在这个线程未被取消，未被中断，未出现异常前提下)。或者还有另外一种方法就是不停调用isDone()来查看任务是否完成，一旦完成就调用get()方法获取结果。这样做，代码结构复杂，且效率低下，所以使用ListenableFuture可以帮助检测Future是否完成，如果完成了就自动调用回调函数，这样可以减少并发程序的复杂度。</p><h2 id="2-ListenableFuture"><a href="#2-ListenableFuture" class="headerlink" title="2.ListenableFuture"></a>2.ListenableFuture</h2><p>ListenableFuture是一个接口，其继承了Future的接口，达到可监听的目的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListenableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Runnable var1, Executor var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中val1是用来执行回调的Runnable, val2是用来执行val1。</p><h3 id="2-1初始化"><a href="#2-1初始化" class="headerlink" title="2.1初始化"></a>2.1初始化</h3><p>可以通过MoreExecutors类的静态方法初始化一个ListeningExecutorService的方法，然后使用此实例的submit方法即可初始化一个ListenableFuture对象，如listeningDecorator:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListeningExecutorService <span class="title">listeningDecorator</span><span class="params">(ExecutorService delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ListeningExecutorService)(delegate <span class="keyword">instanceof</span> ListeningExecutorService ? (ListeningExecutorService)delegate : (delegate <span class="keyword">instanceof</span> ScheduledExecutorService ? <span class="keyword">new</span> MoreExecutors.ScheduledListeningDecorator((ScheduledExecutorService)delegate) : <span class="keyword">new</span> MoreExecutors.ListeningDecorator(delegate)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中ListenableFutre的接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListeningExecutorService</span> <span class="keyword">extends</span> <span class="title">ExecutorService</span> </span>&#123;</span><br><span class="line">    &lt;T&gt; <span class="function">ListenableFuture&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; var1)</span></span>;</span><br><span class="line">    ListenableFuture&lt;?&gt; submit(Runnable var1);</span><br><span class="line">    &lt;T&gt; <span class="function">ListenableFuture&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable var1, T var2)</span></span>;</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, <span class="keyword">long</span> var2, TimeUnit var4) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-2使用ListenableFuture实例"><a href="#2-2使用ListenableFuture实例" class="headerlink" title="2.2使用ListenableFuture实例"></a>2.2使用ListenableFuture实例</h3><p>有了ListenableFuture实例，有两种方法可以执行此Future并执行Future完成之后的回调函数。</p><ul><li>方法一：通过ListenableFuture的addListener方法</li><li>方法二：通过Futures的静态方法addCallback给ListenableFuture添加回调函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function"><span class="keyword">void</span> <span class="title">addCallback</span><span class="params">(ListenableFuture&lt;V&gt; future, FutureCallback&lt;? <span class="keyword">super</span> V&gt; callback)</span> </span>&#123;</span><br><span class="line">        addCallback(future, callback, MoreExecutors.sameThreadExecutor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function"><span class="keyword">void</span> <span class="title">addCallback</span><span class="params">(<span class="keyword">final</span> ListenableFuture&lt;V&gt; future,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">final</span> FutureCallback&lt;? <span class="keyword">super</span> V&gt; callback, Executor executor)</span> </span>&#123;</span><br><span class="line">    Preconditions.checkNotNull(callback);</span><br><span class="line">    Runnable callbackListener = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> V value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// TODO(user): (Before Guava release), validate that this</span></span><br><span class="line">          <span class="comment">// is the thing for IE.</span></span><br><span class="line">          value = getUninterruptibly(future);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">          callback.onFailure(e.getCause());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">          callback.onFailure(e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">          callback.onFailure(e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        callback.onSuccess(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    future.addListener(callbackListener, executor);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>其中可以看一下getUninteruptibly方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function">V <span class="title">getUninterruptibly</span><span class="params">(Future&lt;V&gt; future)</span> <span class="keyword">throws</span> ExecutionException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object var2 = future.get();</span><br><span class="line">                <span class="keyword">return</span> var2;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException var6) &#123;</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>推荐使用第二种方法，因为第二种方法可以直接得到Future的返回值，或者处理错误情况。本质上第二种方法是通过调动第一种方法实现的，做了进一步的封装。</p><h2 id="3-ListenableFuture的实现之一：ListenableFutureTask"><a href="#3-ListenableFuture的实现之一：ListenableFutureTask" class="headerlink" title="3.ListenableFuture的实现之一：ListenableFutureTask"></a>3.ListenableFuture的实现之一：ListenableFutureTask</h2><p>ListenableFutureTask的实现逻辑如下，细节可见参考文档1<br><img src="/image/ListenableFutureTask.png" alt="ListenableFutureTask类图"></p><h2 id="4-总结-amp-思考"><a href="#4-总结-amp-思考" class="headerlink" title="4.总结&amp;思考"></a>4.总结&amp;思考</h2><p>其实我在读到使用推荐的方法二来进行添加回调的源代码时，就有一个疑问，即addCallback()方法只是在里面定义了一个Runnable来封装了回调的几个方法（成功，失败等），但是并没有有线程来执行这个Runnable，后面我读到 ListenableFutureTask 时，发现这个方法中的addListener方法，以及done()方法使用代理ExecutorList来通过我们生成的线程池运行了Runnable，就完整明白了其中的逻辑。</p><p>通过这次的ListenableFuture的分析学习，更加深刻的理解了Java中接口的意义，其实际上是约束了一组行为规范，但是并不具体实现，其可以认为是一个框架制定者，但是并不限制具体的实现。但是我们在实际的应用程序中，使用和接触的是实际的类对象实例，这个类如果实现了接口，就一定会实现这组行为规范，进行落地，让它真正的work起来。有时候在阅读代码或者编写代码时，就会容易犯我前面的糊涂，即担心Futures.addCallback()中的Runnable没人做，实际上我们写的时候是面向接口编程，但是在用的时候，是使用的实际的类，这些类就会完成实际的工作。这种思维无论是在阅读源码还是编写Java代码时，都是非常有用的。</p><h2 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5.参考文档"></a>5.参考文档</h2><ol><li><a href="https://www.jianshu.com/p/a4b4159163fd" target="_blank" rel="noopener">《线程池系列六》-Guava ListenableFutureTask</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-为什么要可监听的Future&quot;&gt;&lt;a href=&quot;#1-为什么要可监听的Future&quot; class=&quot;headerlink&quot; title=&quot;1.为什么要可监听的Future&quot;&gt;&lt;/a&gt;1.为什么要可监听的Future&lt;/h2&gt;&lt;p&gt;从java1.5开始，提供了
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Auctioneer in Cloud Foundry</title>
    <link href="http://yoursite.com/2018/09/06/auctioineerCP/"/>
    <id>http://yoursite.com/2018/09/06/auctioineerCP/</id>
    <published>2018-09-06T13:57:58.000Z</published>
    <updated>2017-07-24T01:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Auctioneer（拍卖商）是cloud foundry中Diego组件的非常重要的一个角色，负责LRP和Task的分发路由，调用auction进行候选人的选择，调用rep的接口部署实际的容器实例等功能，是处于在Diego组件中大脑的核心位置。</p><h3 id="Router-of-auctioneer"><a href="#Router-of-auctioneer" class="headerlink" title="Router of auctioneer"></a>Router of auctioneer</h3><p>在auctioneer/routers.go中定义了路由信息：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Routes = rata.Routes&#123;</span><br><span class="line">    &#123;Path: <span class="string">"/v1/tasks"</span>, Method: <span class="string">"POST"</span>, Name: CreateTaskAuctionsRoute&#125;,</span><br><span class="line">    &#123;Path: <span class="string">"/v1/lrps"</span>, Method: <span class="string">"POST"</span>, Name: CreateLRPAuctionsRoute&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在auctioneer/handlers/handler.go里面有对应的http handler:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(logger lager.Logger, runner auctiontypes.AuctionRunner, metronClient loggregator_v2.IngressClient)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    taskAuctionHandler := logWrap(NewTaskAuctionHandler(runner).Create, logger)</span><br><span class="line">    lrpAuctionHandler := logWrap(NewLRPAuctionHandler(runner).Create, logger)</span><br><span class="line"></span><br><span class="line">    emitter := &amp;auctioneerEmitter&#123;</span><br><span class="line">        logger:       logger,</span><br><span class="line">        metronClient: metronClient,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    actions := rata.Handlers&#123;</span><br><span class="line">        auctioneer.CreateTaskAuctionsRoute: middleware.RecordLatency(taskAuctionHandler, emitter),</span><br><span class="line">        auctioneer.CreateLRPAuctionsRoute:  middleware.RecordLatency(lrpAuctionHandler, emitter),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handler, err := rata.NewRouter(auctioneer.Routes, actions)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"unable to create router: "</span> + err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> middleware.RecordRequestCount(handler, emitter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在每一个route对应的handler中都做了相应的封装(log, 超时设置等)，实际处理的为lrpAuctioinHandler。</p><p>在这个文件中对应处理了每一个route的请求，也是实际的业务代码实现的地方。</p><h3 id="Deep-into-lrpAuctionHandler"><a href="#Deep-into-lrpAuctionHandler" class="headerlink" title="Deep into lrpAuctionHandler"></a>Deep into lrpAuctionHandler</h3><p>在lrpAuctionHandler.create中是具体的业务逻辑的实现：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *LRPAuctionHandler)</span> <span class="title">Create</span><span class="params">(w http.ResponseWriter, r *http.Request, logger lager.Logger)</span></span> &#123;</span><br><span class="line">    logger = h.logSession(logger).Session(<span class="string">"create"</span>)</span><br><span class="line"></span><br><span class="line">    payload, err := ioutil.ReadAll(r.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-to-read-request-body"</span>, err)</span><br><span class="line">        writeInternalErrorJSONResponse(w, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    starts := []auctioneer.LRPStartRequest&#123;&#125;</span><br><span class="line">    err = json.Unmarshal(payload, &amp;starts)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"malformed-json"</span>, err)</span><br><span class="line">        writeInvalidJSONResponse(w, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    validStarts := <span class="built_in">make</span>([]auctioneer.LRPStartRequest, <span class="number">0</span>, <span class="built_in">len</span>(starts))</span><br><span class="line">    lrpGuids := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> starts &#123;</span><br><span class="line">        start := &amp;starts[i]</span><br><span class="line">        <span class="keyword">if</span> err := start.Validate(); err == <span class="literal">nil</span> &#123;</span><br><span class="line">            validStarts = <span class="built_in">append</span>(validStarts, *start)</span><br><span class="line">            indices := lrpGuids[start.ProcessGuid]</span><br><span class="line">            indices = <span class="built_in">append</span>(indices, start.Indices...)</span><br><span class="line">            lrpGuids[start.ProcessGuid] = indices</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.Error(<span class="string">"start-validate-failed"</span>, err, lager.Data&#123;<span class="string">"lrp-start"</span>: start&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h.runner.ScheduleLRPsForAuctions(validStarts)</span><br><span class="line"></span><br><span class="line">    logLRPGuids(lrpGuids, logger)</span><br><span class="line"></span><br><span class="line">    writeStatusAcceptedResponse(w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的步骤如下：<br></p><ol><li>payload, err := ioutil.ReadAll(r.Body)来读取http请求的内容；<br></li><li>json.Unmarshal(payload, &amp;starts)讲读取的内容反序列化，并将内容写到starts中；<br></li><li>make(map[string][]int)是一个map，key为string, value是一个[]int列表；<br></li><li>将starts进行验证生成validStarts;<br></li><li>调用auctionRunner.ScheduleLRPsForAuctions(validStarts)来完成调度过程；</li></ol><h3 id="Deep-into-TaskAuctionHandler"><a href="#Deep-into-TaskAuctionHandler" class="headerlink" title="Deep into TaskAuctionHandler"></a>Deep into TaskAuctionHandler</h3><p>其中这部分的代码和上面的逻辑大概差不多，略过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Auctioneer（拍卖商）是cloud foundry中Diego组件的非常重要的一个角色，负责LRP和Task的分发路由，调用auction进行候选人的选择，调用rep的接口部署实际的容器实例等功能，是处于在Diego组件中大脑的核心位置。&lt;/p&gt;
&lt;h3 id=&quot;R
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BBS in CloudFoundry</title>
    <link href="http://yoursite.com/2018/09/06/BBS%20in%20CloudFoundry/"/>
    <id>http://yoursite.com/2018/09/06/BBS in CloudFoundry/</id>
    <published>2018-09-06T13:57:58.000Z</published>
    <updated>2017-07-24T01:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Diego’s Bulletin Board System (BBS) is the central data store and orchestrator of a Diego cluster. It communicates via protocol-buffer-encoded RPC-style calls over HTTP.</p><h3 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h3><h3 id="Routes-of-BBS"><a href="#Routes-of-BBS" class="headerlink" title="Routes of BBS"></a>Routes of BBS</h3><p>CloudFoundry中是使用rata这个package来处路由信息，rata主要提供了routes, a router and a requestGenerator.在routes.go文件中，路由定义如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Routes = rata.Routes&#123;</span><br><span class="line">    <span class="comment">// Desired LRPs</span></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrp_scheduling_infos/list"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPSchedulingInfosRoute&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrps/list.r2"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPsRoute&#125;,</span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrps/get_by_process_guid.r2"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPByProcessGuidRoute&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrps/list.r1"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPsRoute_r1&#125;,                            <span class="comment">// Deprecated</span></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrps/get_by_process_guid.r1"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPByProcessGuidRoute_r1&#125;, <span class="comment">// Deprecated</span></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrps/list"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPsRoute_r0&#125;,                               <span class="comment">// Deprecated</span></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrps/get_by_process_guid"</span>, Method: <span class="string">"POST"</span>, Name: DesiredLRPByProcessGuidRoute_r0&#125;,    <span class="comment">// Deprecated</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Desire LPR Lifecycle</span></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrp/desire.r2"</span>, Method: <span class="string">"POST"</span>, Name: DesireDesiredLRPRoute&#125;,</span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrp/desire.r1"</span>, Method: <span class="string">"POST"</span>, Name: DesireDesiredLRPRoute_r1&#125;, <span class="comment">// Deprecated</span></span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrp/update"</span>, Method: <span class="string">"POST"</span>, Name: UpdateDesiredLRPRoute&#125;,</span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrp/remove"</span>, Method: <span class="string">"POST"</span>, Name: RemoveDesiredLRPRoute&#125;,</span><br><span class="line">    &#123;Path: <span class="string">"/v1/desired_lrp/desire"</span>, Method: <span class="string">"POST"</span>, Name: DesireDesiredLRPRoute_r0&#125;, <span class="comment">// Deprecated</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的路由主要显示了desired_lrp的请求，其他类型的请求大概差不多。<br>在server端，需要创建对应的http handler,在handlers/handlers.go中定义了相关的内容：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">actions := rata.Handlers&#123;</span><br><span class="line">        <span class="comment">// Desired LRPs</span></span><br><span class="line">        bbs.DesiredLRPsRoute:               route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPs))),</span><br><span class="line">        bbs.DesiredLRPByProcessGuidRoute:   route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPByProcessGuid))),</span><br><span class="line">        bbs.DesiredLRPSchedulingInfosRoute: route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPSchedulingInfos))),</span><br><span class="line">        bbs.DesireDesiredLRPRoute:          route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesireDesiredLRP))),</span><br><span class="line">        bbs.UpdateDesiredLRPRoute:          route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.UpdateDesiredLRP))),</span><br><span class="line">        bbs.RemoveDesiredLRPRoute:          route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.RemoveDesiredLRP))),</span><br><span class="line"></span><br><span class="line">        bbs.DesiredLRPsRoute_r0:             route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPs_r0))),</span><br><span class="line">        bbs.DesiredLRPsRoute_r1:             route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPs_r1))),</span><br><span class="line">        bbs.DesiredLRPByProcessGuidRoute_r0: route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPByProcessGuid_r0))),</span><br><span class="line">        bbs.DesiredLRPByProcessGuidRoute_r1: route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesiredLRPByProcessGuid_r1))),</span><br><span class="line">        bbs.DesireDesiredLRPRoute_r0:        route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesireDesiredLRP_r0))),</span><br><span class="line">        bbs.DesireDesiredLRPRoute_r1:        route(emitter.RecordLatency(middleware.LogWrap(logger, accessLogger, desiredLRPHandler.DesireDesiredLRP_r1))),</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在每一个route对应的handler中都做了相应的封装(log, 超时设置等)，实际处理的为desiredLRPHandler.***。</p><p>在这个文件中对应处理了每一个route的请求，也是实际的业务代码实现的地方。</p><h3 id="An-exampler-DesiredLRPHandler"><a href="#An-exampler-DesiredLRPHandler" class="headerlink" title="An exampler: DesiredLRPHandler"></a>An exampler: DesiredLRPHandler</h3><p>在转到对应的desired_lrp_handlers.go文件中可以看到DesiredLRPHandler的数据结构：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DesiredLRPHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">    desiredLRPDB       db.DesiredLRPDB</span><br><span class="line">    actualLRPDB        db.ActualLRPDB</span><br><span class="line">    desiredHub         events.Hub</span><br><span class="line">    actualHub          events.Hub</span><br><span class="line">    auctioneerClient   auctioneer.Client</span><br><span class="line">    repClientFactory   rep.ClientFactory</span><br><span class="line">    serviceClient      serviceclient.ServiceClient</span><br><span class="line">    updateWorkersCount <span class="keyword">int</span></span><br><span class="line">    exitChan           <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出这个处理句柄中主要有这几类参数：数据库参数，事件处理中心，auctionerr.Client参数，Diego中的cell中的rep的Client，还有一个exitChan管道。<br></p><h4 id="涉及数据库-bbs-db-的更新"><a href="#涉及数据库-bbs-db-的更新" class="headerlink" title="涉及数据库(bbs db)的更新"></a>涉及数据库(bbs db)的更新</h4><p>其中很多handler方法是直接操作数据库获取相应的信息，以DesiredLRPs为例：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DesiredLRPHandler)</span> <span class="title">DesiredLRPs</span><span class="params">(logger lager.Logger, w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    logger = logger.Session(<span class="string">"desired-lrps"</span>)</span><br><span class="line"></span><br><span class="line">    request := &amp;models.DesiredLRPsRequest&#123;&#125;</span><br><span class="line">    response := &amp;models.DesiredLRPsResponse&#123;&#125;</span><br><span class="line"></span><br><span class="line">    err = parseRequest(logger, req, request)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        filter := models.DesiredLRPFilter&#123;Domain: request.Domain, ProcessGuids: request.ProcessGuids&#125;</span><br><span class="line">        response.DesiredLrps, err = h.desiredLRPDB.DesiredLRPs(logger, filter)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.Error = models.ConvertError(err)</span><br><span class="line">    writeResponse(w, response)</span><br><span class="line">    exitIfUnrecoverable(logger, h.exitChan, response.Error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为在bbs中使用的是protocol buffers数据交换格式，以上面的方法为例，在models/desired_lrp_requests.proto中定义了请求传输的数据格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">message DesiredLRPsResponse &#123;</span><br><span class="line">  optional Error error = 1;</span><br><span class="line">  repeated DesiredLRP desired_lrps = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message DesiredLRPsRequest &#123;</span><br><span class="line">  optional string domain = 1;</span><br><span class="line">  repeated string process_guids = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见这个handler方法通过将请求解析，验证，然后调用handler.desiredLRPDB中的方法来获取相应结果，然后调用writeResponse(w, response)来将结果写入到返回w http.ResponseWriter。</p><h4 id="涉及到events-Hub的方法调用"><a href="#涉及到events-Hub的方法调用" class="headerlink" title="涉及到events.Hub的方法调用"></a>涉及到events.Hub的方法调用</h4><p>关于LRP创建，更新，其中的方法调用了events.hub协程来处理这类的事件(我估计因为涉及到调度相关的策略，所以需要一个事件处理中心来解决这类问题)，以DesireDesiredLRP方法为例：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DesiredLRPHandler)</span> <span class="title">DesireDesiredLRP</span><span class="params">(logger lager.Logger, w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    logger = logger.Session(<span class="string">"desire-lrp"</span>)</span><br><span class="line"></span><br><span class="line">    request := &amp;models.DesireLRPRequest&#123;&#125;</span><br><span class="line">    response := &amp;models.DesiredLRPLifecycleResponse&#123;&#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; exitIfUnrecoverable(logger, h.exitChan, response.Error) &#125;()</span><br><span class="line">    <span class="keyword">defer</span> writeResponse(w, response)</span><br><span class="line"></span><br><span class="line">    err := parseRequest(logger, req, request)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        response.Error = models.ConvertError(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = h.desiredLRPDB.DesireLRP(logger, request.DesiredLrp)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        response.Error = models.ConvertError(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    desiredLRP, err := h.desiredLRPDB.DesiredLRPByProcessGuid(logger, request.DesiredLrp.ProcessGuid)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        response.Error = models.ConvertError(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> h.desiredHub.Emit(models.NewDesiredLRPCreatedEvent(desiredLRP))</span><br><span class="line"></span><br><span class="line">    schedulingInfo := request.DesiredLrp.DesiredLRPSchedulingInfo()</span><br><span class="line">    h.startInstanceRange(logger, <span class="number">0</span>, schedulingInfo.Instances, &amp;schedulingInfo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看倒数第三行，可以看到通过h.desiredHub.Emit生成了一个协程执行LRPCreateEvent事件，进入models/events.go查看相关函数：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDesiredLRPCreatedEvent</span><span class="params">(desiredLRP *DesiredLRP)</span> *<span class="title">DesiredLRPCreatedEvent</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;DesiredLRPCreatedEvent&#123;</span><br><span class="line">        DesiredLrp: desiredLRP,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再看events/hub.go中的Emit方法，查看其如何处理这类的事件：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hub *hub)</span> <span class="title">Emit</span><span class="params">(event models.Event)</span></span> &#123;</span><br><span class="line">    hub.lock.Lock()</span><br><span class="line">    size := <span class="built_in">len</span>(hub.subscribers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sub, _ := <span class="keyword">range</span> hub.subscribers &#123;</span><br><span class="line">        err := sub.send(event)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">delete</span>(hub.subscribers, sub)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cb <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">len</span><span class="params">(hub.subscribers)</span> != <span class="title">size</span></span> &#123;</span><br><span class="line">        cb = hub.cb</span><br><span class="line">        size = <span class="built_in">len</span>(hub.subscribers)</span><br><span class="line">    &#125;</span><br><span class="line">    hub.lock.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cb != <span class="literal">nil</span> &#123;</span><br><span class="line">        cb(size)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看这个文件中hub和hubSource的定义：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hub <span class="keyword">struct</span> &#123;</span><br><span class="line">    subscribers <span class="keyword">map</span>[*hubSource]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    closed      <span class="keyword">bool</span></span><br><span class="line">    lock        sync.Mutex</span><br><span class="line"></span><br><span class="line">    cb <span class="function"><span class="keyword">func</span><span class="params">(count <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">hubSource</span> <span class="title">struct</span></span> &#123;</span><br><span class="line">    events        <span class="keyword">chan</span> models.Event</span><br><span class="line">    closeCallback <span class="function"><span class="keyword">func</span><span class="params">(*hubSource)</span></span></span><br><span class="line"><span class="function">    <span class="title">closed</span>        <span class="title">bool</span></span></span><br><span class="line"><span class="function">    <span class="title">lock</span>          <span class="title">sync</span>.<span class="title">Mutex</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以看出这是一个封装了channel 和sync.Mutex的结构体，关于hubSource.send方法里面有一个select方法，用法可见这个<a href="http://studygolang.com/articles/2696" target="_blank" rel="noopener">BLOG</a>,所以Emit方法的意义就是如果event进入了channel，则暂时不需要被处理，可以pending，否则调用cb func(int)来处理，并且更新subscribers的数量,cb func(int)的实现未知，而且channel的接收协程也暂时未知。</p><p><br><strong>填坑：</strong>channel的接收方法在hubSource.Next()方法中，这也印证了我之前的想法，events.Hub是用来缓存请求的。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(source *hubSource)</span> <span class="title">Next</span><span class="params">()</span> <span class="params">(models.Event, error)</span></span> &#123;</span><br><span class="line">    event, ok := &lt;-source.events</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, ErrReadFromClosedSource</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> event, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br>再回到刚开始的DesireDesiredLRP方法的最后一行，也就是DesiredLRPHandler.startInstanceRange方法，这个方法是真正调用diego中的Auctioneer来启动Instance的方法。</p><h4 id="涉及到AuctioneerClient的方法"><a href="#涉及到AuctioneerClient的方法" class="headerlink" title="涉及到AuctioneerClient的方法"></a>涉及到AuctioneerClient的方法</h4><p>DesiredLRPHandler.startInstanceRange方法如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DesiredLRPHandler)</span> <span class="title">startInstanceRange</span><span class="params">(logger lager.Logger, lower, upper <span class="keyword">int32</span>, schedulingInfo *models.DesiredLRPSchedulingInfo)</span></span> &#123;</span><br><span class="line">    logger = logger.Session(<span class="string">"start-instance-range"</span>, lager.Data&#123;<span class="string">"lower"</span>: lower, <span class="string">"upper"</span>: upper&#125;)</span><br><span class="line">    logger.Info(<span class="string">"starting"</span>)</span><br><span class="line">    <span class="keyword">defer</span> logger.Info(<span class="string">"complete"</span>)</span><br><span class="line"></span><br><span class="line">    keys := <span class="built_in">make</span>([]*models.ActualLRPKey, upper-lower)</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> actualIndex := lower; actualIndex &lt; upper; actualIndex++ &#123;</span><br><span class="line">        key := models.NewActualLRPKey(schedulingInfo.ProcessGuid, <span class="keyword">int32</span>(actualIndex), schedulingInfo.Domain)</span><br><span class="line">        keys[i] = &amp;key</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createdIndices := h.createUnclaimedActualLRPs(logger, keys)</span><br><span class="line">    start := auctioneer.NewLRPStartRequestFromSchedulingInfo(schedulingInfo, createdIndices...)</span><br><span class="line"></span><br><span class="line">    logger.Info(<span class="string">"start-lrp-auction-request"</span>, lager.Data&#123;<span class="string">"app_guid"</span>: schedulingInfo.ProcessGuid, <span class="string">"indices"</span>: createdIndices&#125;)</span><br><span class="line">    err := h.auctioneerClient.RequestLRPAuctions(logger, []*auctioneer.LRPStartRequest&#123;&amp;start&#125;)</span><br><span class="line">    logger.Info(<span class="string">"finished-lrp-auction-request"</span>, lager.Data&#123;<span class="string">"app_guid"</span>: schedulingInfo.ProcessGuid, <span class="string">"indices"</span>: createdIndices&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-to-request-auction"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法很重要，可以看出这个方法接收了models.DesiredLRPSchedulingInfo以及需要启动的实例个数(lower, upper)来执行讲DesiredLRPC变成ActualLRPs的过程。<br>首先生成了models.ActualLRPKey数组，然后调用了DesiredLRPHandler.createUnclaimedActualLRPs方法来执行任务：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DesiredLRPHandler)</span> <span class="title">createUnclaimedActualLRPs</span><span class="params">(logger lager.Logger, keys []*models.ActualLRPKey)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    count := <span class="built_in">len</span>(keys)</span><br><span class="line">    createdIndicesChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, count)</span><br><span class="line"></span><br><span class="line">    works := <span class="built_in">make</span>([]<span class="function"><span class="keyword">func</span><span class="params">()</span>, <span class="title">count</span>)</span></span><br><span class="line">    logger = logger.Session("create-unclaimed-actual-lrp")</span><br><span class="line">    <span class="keyword">for</span> i, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">        key := key</span><br><span class="line">        works[i] = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            logger.Info(<span class="string">"starting"</span>, lager.Data&#123;<span class="string">"actual_lrp_key"</span>: key&#125;)</span><br><span class="line">            actualLRPGroup, err := h.actualLRPDB.CreateUnclaimedActualLRP(logger, key)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logger.Info(<span class="string">"failed"</span>, lager.Data&#123;<span class="string">"actual_lrp_key"</span>: key, <span class="string">"err_message"</span>: err.Error()&#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">go</span> h.actualHub.Emit(models.NewActualLRPCreatedEvent(actualLRPGroup))</span><br><span class="line">                createdIndicesChan &lt;- <span class="keyword">int</span>(key.Index)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    throttlerSize := h.updateWorkersCount</span><br><span class="line">    throttler, err := workpool.NewThrottler(throttlerSize, works)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-constructing-throttler"</span>, err, lager.Data&#123;<span class="string">"max_workers"</span>: throttlerSize, <span class="string">"num_works"</span>: <span class="built_in">len</span>(works)&#125;)</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        throttler.Work()</span><br><span class="line">        <span class="built_in">close</span>(createdIndicesChan)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    createdIndices := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, count)</span><br><span class="line">    <span class="keyword">for</span> createdIndex := <span class="keyword">range</span> createdIndicesChan &#123;</span><br><span class="line">        createdIndices = <span class="built_in">append</span>(createdIndices, createdIndex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createdIndices</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出在这个方法中调用了另外一个workpool.NewThrottler方法来执行方法中的works函数，因此可以进入此查看实现过程（我感觉此对象（接口）中完成了我们前面提到的evnethub所生成的事件的处理工作）：<br>查看workpool/throttler.go中的相关方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Throttler <span class="keyword">struct</span> &#123;</span><br><span class="line">    pool  *WorkPool</span><br><span class="line">    works []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">NewThrottler</span><span class="params">(maxWorkers <span class="keyword">int</span>, works []<span class="keyword">func</span>()</span>) <span class="params">(*Throttler, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> maxWorkers &lt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"must provide positive maxWorkers; provided %d"</span>, maxWorkers)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pool *WorkPool</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(works) &lt; maxWorkers &#123;</span><br><span class="line">        pool = newWorkPoolWithPending(<span class="built_in">len</span>(works), <span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pool = newWorkPoolWithPending(maxWorkers, <span class="built_in">len</span>(works)-maxWorkers)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;Throttler&#123;</span><br><span class="line">        pool:  pool,</span><br><span class="line">        works: works,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Throttler)</span> <span class="title">Work</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> t.pool.Stop()</span><br><span class="line"></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(<span class="built_in">len</span>(t.works))</span><br><span class="line">    <span class="keyword">for</span> _, work := <span class="keyword">range</span> t.works &#123;</span><br><span class="line">        work := work</span><br><span class="line">        t.pool.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            work()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再回到前面的代码中可以看到auctioneer.NewLRPStartRequestFromSchedulingInfo以及auctioneerClient.RequestLRPAuctions方法，可以从auctioneer 包中看到client.go方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:generate counterfeiter -o auctioneerfakes/fake_client.go . Client</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">interface</span> &#123;</span><br><span class="line">    RequestLRPAuctions(logger lager.Logger, lrpStart []*LRPStartRequest) error</span><br><span class="line">    RequestTaskAuctions(logger lager.Logger, tasks []*TaskStartRequest) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> auctioneerClient <span class="keyword">struct</span> &#123;</span><br><span class="line">    httpClient         *http.Client</span><br><span class="line">    insecureHTTPClient *http.Client</span><br><span class="line">    url                <span class="keyword">string</span></span><br><span class="line">    requireTLS         <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewClient</span><span class="params">(auctioneerURL <span class="keyword">string</span>)</span> <span class="title">Client</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;auctioneerClient&#123;</span><br><span class="line">        httpClient: cfhttp.NewClient(),</span><br><span class="line">        url:        auctioneerURL,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *auctioneerClient)</span> <span class="title">RequestLRPAuctions</span><span class="params">(logger lager.Logger, lrpStarts []*LRPStartRequest)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    logger = logger.Session(<span class="string">"request-lrp-auctions"</span>)</span><br><span class="line"></span><br><span class="line">    reqGen := rata.NewRequestGenerator(c.url, Routes)</span><br><span class="line">    payload, err := json.Marshal(lrpStarts)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req, err := reqGen.CreateRequest(CreateLRPAuctionsRoute, rata.Params&#123;&#125;, bytes.NewBuffer(payload))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line"></span><br><span class="line">    resp, err := c.doRequest(logger, req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resp.StatusCode != http.StatusAccepted &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"http error: status code %d (%s)"</span>, resp.StatusCode, http.StatusText(resp.StatusCode))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *auctioneerClient)</span> <span class="title">RequestTaskAuctions</span><span class="params">(logger lager.Logger, tasks []*TaskStartRequest)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    logger = logger.Session(<span class="string">"request-task-auctions"</span>)</span><br><span class="line"></span><br><span class="line">    reqGen := rata.NewRequestGenerator(c.url, Routes)</span><br><span class="line">    payload, err := json.Marshal(tasks)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req, err := reqGen.CreateRequest(CreateTaskAuctionsRoute, rata.Params&#123;&#125;, bytes.NewBuffer(payload))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line"></span><br><span class="line">    resp, err := c.doRequest(logger, req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resp.StatusCode != http.StatusAccepted &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"http error: status code %d (%s)"</span>, resp.StatusCode, http.StatusText(resp.StatusCode))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *auctioneerClient)</span> <span class="title">doRequest</span><span class="params">(logger lager.Logger, req *http.Request)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">    resp, err := c.httpClient.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// Fall back to HTTP and try again if we do not require TLS</span></span><br><span class="line">        <span class="keyword">if</span> !c.requireTLS &amp;&amp; c.insecureHTTPClient != <span class="literal">nil</span> &#123;</span><br><span class="line">            logger.Error(<span class="string">"retrying-on-http"</span>, err)</span><br><span class="line">            req.URL.Scheme = <span class="string">"http"</span></span><br><span class="line">            <span class="keyword">return</span> c.insecureHTTPClient.Do(req)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resp, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>关于golang的interface介绍</strong>：interface类型定义了一组方法，如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md" target="_blank" rel="noopener">Interface</a><br>可见在这个方法中，利用rata生成了一个reqGen来处理tasks任务，然后调用reqGen.CreateRequest()和httpClient.Do()来处理请求。更多的关于rata的信息，可见<a href="https://github.com/tedsuo/rata" target="_blank" rel="noopener">POST</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Diego’s Bulletin Board System (BBS) is the central data store and orchestrator of a Diego cluster. It communicates via protocol-buffer-en
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BBS in CloudFoundry(2)-Client的设计和实现</title>
    <link href="http://yoursite.com/2018/09/06/BBSinCloudFoundry(2)/"/>
    <id>http://yoursite.com/2018/09/06/BBSinCloudFoundry(2)/</id>
    <published>2018-09-06T13:57:58.000Z</published>
    <updated>2017-07-25T06:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Diego’s Bulletin Board System (BBS) is the central data store and orchestrator of a Diego cluster. It communicates via protocol-buffer-encoded RPC-style calls over HTTP.</p><h3 id="Clients-of-BBS"><a href="#Clients-of-BBS" class="headerlink" title="Clients of BBS"></a>Clients of BBS</h3><p>因为bbs是通过http的方式来响应其他组件的请求的（当然cloud foundry中各个组件之间都是这样的方式进行的），bbs像其他组件一样封装了client接口。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> client <span class="keyword">struct</span> &#123;</span><br><span class="line">httpClient          *http.Client</span><br><span class="line">streamingHTTPClient *http.Client</span><br><span class="line">reqGen              *rata.RequestGenerator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newClient</span><span class="params">(url <span class="keyword">string</span>)</span> *<span class="title">client</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;client&#123;</span><br><span class="line">httpClient:          cfhttp.NewClient(),</span><br><span class="line">streamingHTTPClient: cfhttp.NewStreamingClient(),</span><br><span class="line">reqGen:              rata.NewRequestGenerator(url, Routes),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们再看每个client方法的实现，其中主要以下几类：</p><h4 id="设计到doRequest方法的-如下面展示的DesiredLRPSchedulingInfos"><a href="#设计到doRequest方法的-如下面展示的DesiredLRPSchedulingInfos" class="headerlink" title="设计到doRequest方法的,如下面展示的DesiredLRPSchedulingInfos:"></a>设计到doRequest方法的,如下面展示的DesiredLRPSchedulingInfos:</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">DesiredLRPSchedulingInfos</span><span class="params">(logger lager.Logger, filter models.DesiredLRPFilter)</span> <span class="params">([]*models.DesiredLRPSchedulingInfo, error)</span></span> &#123;</span><br><span class="line">request := models.DesiredLRPsRequest&#123;</span><br><span class="line">Domain:       filter.Domain,</span><br><span class="line">ProcessGuids: filter.ProcessGuids,</span><br><span class="line">&#125;</span><br><span class="line">response := models.DesiredLRPSchedulingInfosResponse&#123;&#125;</span><br><span class="line">err := c.doRequest(logger, DesiredLRPSchedulingInfosRoute, <span class="literal">nil</span>, <span class="literal">nil</span>, &amp;request, &amp;response)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response.DesiredLrpSchedulingInfos, response.Error.ToError()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中重要的方法doRequest方法的实现如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">doRequest</span><span class="params">(logger lager.Logger, requestName <span class="keyword">string</span>, params rata.Params, queryParams url.Values, requestBody, responseBody proto.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">logger = logger.Session(<span class="string">"do-request"</span>)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> request *http.Request</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> attempts := <span class="number">0</span>; attempts &lt; <span class="number">3</span>; attempts++ &#123;</span><br><span class="line">logger.Debug(<span class="string">"creating-request"</span>, lager.Data&#123;<span class="string">"attempt"</span>: attempts + <span class="number">1</span>, <span class="string">"request_name"</span>: requestName&#125;)</span><br><span class="line">request, err = c.createRequest(requestName, params, queryParams, requestBody)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(<span class="string">"failed-creating-request"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.Debug(<span class="string">"doing-request"</span>, lager.Data&#123;<span class="string">"attempt"</span>: attempts + <span class="number">1</span>, <span class="string">"request_path"</span>: request.URL.Path&#125;)</span><br><span class="line"></span><br><span class="line">start := time.Now().UnixNano()</span><br><span class="line">err = c.do(request, responseBody)</span><br><span class="line">finish := time.Now().UnixNano()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(<span class="string">"failed-doing-request"</span>, err)</span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logger.Debug(<span class="string">"complete"</span>, lager.Data&#123;<span class="string">"request_path"</span>: request.URL.Path, <span class="string">"duration_in_ns"</span>: finish - start&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参照rata的文档，其在line7使用了createRequests方法，然后使用了c.do()方法完成请求的处理。</p><p>首先可见createRequest方法的实现：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">createRequest</span><span class="params">(requestName <span class="keyword">string</span>, params rata.Params, queryParams url.Values, message proto.Message)</span> <span class="params">(*http.Request, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> messageBody []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> message != <span class="literal">nil</span> &#123;</span><br><span class="line">messageBody, err = proto.Marshal(message)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request, err := c.reqGen.CreateRequest(requestName, params, bytes.NewReader(messageBody))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.URL.RawQuery = queryParams.Encode()</span><br><span class="line">request.ContentLength = <span class="keyword">int64</span>(<span class="built_in">len</span>(messageBody))</span><br><span class="line">request.Header.Set(<span class="string">"Content-Type"</span>, ProtoContentType)</span><br><span class="line"><span class="keyword">return</span> request, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见其首先对消息主体进行了marshal, 然后调用了原生方法创建了一个request, 并且处理了queryParams,最后发挥了生成的request。</p><p>再见do方法的实现：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">do</span><span class="params">(request *http.Request, responseObject proto.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">response, err := c.httpClient.Do(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// don't worry about errors when closing the body</span></span><br><span class="line">_ = response.Body.Close()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parsedContentType <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> contentType, ok := response.Header[ContentTypeHeader]; ok &#123;</span><br><span class="line">parsedContentType, _, _ = mime.ParseMediaType(contentType[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> routerError, ok := response.Header[XCfRouterErrorHeader]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> models.NewError(models.Error_RouterError, routerError[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> parsedContentType == ProtoContentType &#123;</span><br><span class="line"><span class="keyword">return</span> handleProtoResponse(response, responseObject)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> handleNonProtoResponse(response)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Diego’s Bulletin Board System (BBS) is the central data store and orchestrator of a Diego cluster. It communicates via protocol-buffer-en
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Auction in Cloud Foundry</title>
    <link href="http://yoursite.com/2018/09/06/AuctioninCF/"/>
    <id>http://yoursite.com/2018/09/06/AuctioninCF/</id>
    <published>2018-09-06T13:57:58.000Z</published>
    <updated>2017-07-24T01:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>The auction package in this repository encodes the details behind Diego’s scheduling mechanism. There are two components in Diego that participate in auctions:</p><p>The Auctioneer is responsible for holding auctions whenever a Task or LongRunningProcess needs to be scheduled.<br>The Rep represents a Diego Cell in the auction by making bids and, if picked as the winner, running the Task or LongRunningProcess.<br>The Auctioneers run on the Diego “Brain” nodes, and there is only ever one active Auctioneer at a time (determined by acquiring a lock in Consul). There is one Rep running on every Diego Cell.</p><p>The Auctioneer communicates with Reps on all Cells when holding an auction.</p><h3 id="Overview-of-auction-runner"><a href="#Overview-of-auction-runner" class="headerlink" title="Overview of auction runner"></a>Overview of auction runner</h3><p>The auctionrunner package provides an ifrit process runner which consumes an incoming stream of requested auction work, batches it up, communicates with the Cell reps, picks winners, and then instructs the Cells to perform the work.<br>进入auction/auctionrunner/auction_runner.go可以发现auctionRunner的数据结构：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> auctionRunner <span class="keyword">struct</span> &#123;</span><br><span class="line">    logger lager.Logger</span><br><span class="line"></span><br><span class="line">    delegate                      auctiontypes.AuctionRunnerDelegate</span><br><span class="line">    metricEmitter                 auctiontypes.AuctionMetricEmitterDelegate</span><br><span class="line">    batch                         *Batch</span><br><span class="line">    clock                         clock.Clock</span><br><span class="line">    workPool                      *workpool.WorkPool</span><br><span class="line">    startingContainerWeight       <span class="keyword">float64</span></span><br><span class="line">    startingContainerCountMaximum <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们先看Batch这个数据结构，其在相同的包下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Batch <span class="keyword">struct</span> &#123;</span><br><span class="line">    lrpAuctions  []auctiontypes.LRPAuction</span><br><span class="line">    taskAuctions []auctiontypes.TaskAuction</span><br><span class="line">    lock         *sync.Mutex</span><br><span class="line">    HasWork      <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    clock        clock.Clock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见其封装了一个两种任务的数组，并且通过sync.Mutex来达到线程安全，还使用了一个channel来进行io监听，每次生成一个任务时，都会调用claimToHaveWork方法，来向channel里添加一个值，这样在其他任务进入时，就可以检测任务是否已满，而不是一直等待，<strong><a href="http://yanyiwu.com/work/2014/11/08/golang-select-typical-usage.html" target="_blank" rel="noopener">golang的select典型用法</a></strong>，可见下面代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Batch)</span> <span class="title">AddLRPStarts</span><span class="params">(starts []auctioneer.LRPStartRequest)</span></span> &#123;</span><br><span class="line">    auctions := <span class="built_in">make</span>([]auctiontypes.LRPAuction, <span class="number">0</span>, <span class="built_in">len</span>(starts))</span><br><span class="line">    now := b.clock.Now()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> starts &#123;</span><br><span class="line">        start := &amp;starts[i]</span><br><span class="line">        <span class="keyword">for</span> _, index := <span class="keyword">range</span> start.Indices &#123;</span><br><span class="line">            lrpKey := models.NewActualLRPKey(start.ProcessGuid, <span class="keyword">int32</span>(index), start.Domain)</span><br><span class="line">            auction := auctiontypes.NewLRPAuction(rep.NewLRP(lrpKey, start.Resource, start.PlacementConstraint), now)</span><br><span class="line">            auctions = <span class="built_in">append</span>(auctions, auction)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b.lock.Lock()</span><br><span class="line">    b.lrpAuctions = <span class="built_in">append</span>(b.lrpAuctions, auctions...)</span><br><span class="line">    b.claimToHaveWork()</span><br><span class="line">    b.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Batch)</span> <span class="title">claimToHaveWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> b.HasWork &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在回过头来看auctionRunner，其中的方法涉及到任务发送的代码是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *auctionRunner)</span> <span class="title">ScheduleLRPsForAuctions</span><span class="params">(lrpStarts []auctioneer.LRPStartRequest)</span></span> &#123;</span><br><span class="line">    a.batch.AddLRPStarts(lrpStarts)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *auctionRunner)</span> <span class="title">ScheduleTasksForAuctions</span><span class="params">(tasks []auctioneer.TaskStartRequest)</span></span> &#123;</span><br><span class="line">    a.batch.AddTasks(tasks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入核心方法Runner方法来查看执行的时候细节是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *auctionRunner)</span> <span class="title">Run</span><span class="params">(signals &lt;-<span class="keyword">chan</span> os.Signal, ready <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="built_in">close</span>(ready)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hasWork <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    hasWork = a.batch.HasWork</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-hasWork:</span><br><span class="line">            logger := a.logger.Session(<span class="string">"auction"</span>)</span><br><span class="line"></span><br><span class="line">            logger.Info(<span class="string">"fetching-cell-reps"</span>)</span><br><span class="line">            clients, err := a.delegate.FetchCellReps()</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logger.Error(<span class="string">"failed-to-fetch-reps"</span>, err)</span><br><span class="line">                time.Sleep(time.Second)</span><br><span class="line">                hasWork = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">                hasWork &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            logger.Info(<span class="string">"fetched-cell-reps"</span>, lager.Data&#123;<span class="string">"cell-reps-count"</span>: <span class="built_in">len</span>(clients)&#125;)</span><br><span class="line"></span><br><span class="line">            hasWork = a.batch.HasWork</span><br><span class="line"></span><br><span class="line">            logger.Info(<span class="string">"fetching-zone-state"</span>)</span><br><span class="line">            fetchStatesStartTime := time.Now()</span><br><span class="line">            zones := FetchStateAndBuildZones(logger, a.workPool, clients, a.metricEmitter)</span><br><span class="line">            fetchStateDuration := time.Since(fetchStatesStartTime)</span><br><span class="line">            err = a.metricEmitter.FetchStatesCompleted(fetchStateDuration)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logger.Error(<span class="string">"failed-sending-fetch-states-completed-metric"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cellCount := <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> zone, cells := <span class="keyword">range</span> zones &#123;</span><br><span class="line">                logger.Info(<span class="string">"zone-state"</span>, lager.Data&#123;<span class="string">"zone"</span>: zone, <span class="string">"cell-count"</span>: <span class="built_in">len</span>(cells)&#125;)</span><br><span class="line">                cellCount += <span class="built_in">len</span>(cells)</span><br><span class="line">            &#125;</span><br><span class="line">            logger.Info(<span class="string">"fetched-zone-state"</span>, lager.Data&#123;</span><br><span class="line">                <span class="string">"cell-state-count"</span>:    cellCount,</span><br><span class="line">                <span class="string">"num-failed-requests"</span>: <span class="built_in">len</span>(clients) - cellCount,</span><br><span class="line">                <span class="string">"duration"</span>:            fetchStateDuration.String(),</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            logger.Info(<span class="string">"fetching-auctions"</span>)</span><br><span class="line">            lrpAuctions, taskAuctions := a.batch.DedupeAndDrain()</span><br><span class="line">            logger.Info(<span class="string">"fetched-auctions"</span>, lager.Data&#123;</span><br><span class="line">                <span class="string">"lrp-start-auctions"</span>: <span class="built_in">len</span>(lrpAuctions),</span><br><span class="line">                <span class="string">"task-auctions"</span>:      <span class="built_in">len</span>(taskAuctions),</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(lrpAuctions) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(taskAuctions) == <span class="number">0</span> &#123;</span><br><span class="line">                logger.Info(<span class="string">"nothing-to-auction"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            logger.Info(<span class="string">"scheduling"</span>)</span><br><span class="line">            auctionRequest := auctiontypes.AuctionRequest&#123;</span><br><span class="line">                LRPs:  lrpAuctions,</span><br><span class="line">                Tasks: taskAuctions,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            scheduler := NewScheduler(a.workPool, zones, a.clock, logger, a.startingContainerWeight, a.startingContainerCountMaximum)</span><br><span class="line">            auctionResults := scheduler.Schedule(auctionRequest)</span><br><span class="line">            logger.Info(<span class="string">"scheduled"</span>, lager.Data&#123;</span><br><span class="line">                <span class="string">"successful-lrp-start-auctions"</span>: <span class="built_in">len</span>(auctionResults.SuccessfulLRPs),</span><br><span class="line">                <span class="string">"successful-task-auctions"</span>:      <span class="built_in">len</span>(auctionResults.SuccessfulTasks),</span><br><span class="line">                <span class="string">"failed-lrp-start-auctions"</span>:     <span class="built_in">len</span>(auctionResults.FailedLRPs),</span><br><span class="line">                <span class="string">"failed-task-auctions"</span>:          <span class="built_in">len</span>(auctionResults.FailedTasks),</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            a.metricEmitter.AuctionCompleted(auctionResults)</span><br><span class="line">            a.delegate.AuctionCompleted(auctionResults)</span><br><span class="line">        <span class="keyword">case</span> &lt;-signals:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见这个方法通过for select循环来接收任务，并在循环体内处理任务，其中有一些涉及到其他模块的代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetchStatesStartTime := time.Now()</span><br><span class="line">zones := FetchStateAndBuildZones(logger, a.workPool, clients, a.metricEmitter)</span><br><span class="line">fetchStateDuration := time.Since(fetchStatesStartTime)</span><br><span class="line">err = a.metricEmitter.FetchStatesCompleted(fetchStateDuration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    logger.Error(<span class="string">"failed-sending-fetch-states-completed-metric"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一段代码通过搜索可用zones来确定任务放置的位置；然后在调用Scheduler来进行任务调度：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">scheduler := NewScheduler(a.workPool, zones, a.clock, logger, a.startingContainerWeight, a.startingContainerCountMaximum)</span><br><span class="line">auctionResults := scheduler.Schedule(auctionRequest)</span><br><span class="line">logger.Info(<span class="string">"scheduled"</span>, lager.Data&#123;</span><br><span class="line">                <span class="string">"successful-lrp-start-auctions"</span>: <span class="built_in">len</span>(auctionResults.SuccessfulLRPs),</span><br><span class="line">                <span class="string">"successful-task-auctions"</span>:      <span class="built_in">len</span>(auctionResults.SuccessfulTasks),</span><br><span class="line">                <span class="string">"failed-lrp-start-auctions"</span>:     <span class="built_in">len</span>(auctionResults.FailedLRPs),</span><br><span class="line">                <span class="string">"failed-task-auctions"</span>:          <span class="built_in">len</span>(auctionResults.FailedTasks),</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">a.metricEmitter.AuctionCompleted(auctionResults)</span><br><span class="line">a.delegate.AuctionCompleted(auctionResults)</span><br></pre></td></tr></table></figure></p><h4 id="涉及到auction-schedule的代码"><a href="#涉及到auction-schedule的代码" class="headerlink" title="涉及到auction schedule的代码"></a>涉及到auction schedule的代码</h4><p>Scheduler的数据结构：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scheduler <span class="keyword">struct</span> &#123;</span><br><span class="line">    workPool                      *workpool.WorkPool</span><br><span class="line">    zones                         <span class="keyword">map</span>[<span class="keyword">string</span>]Zone</span><br><span class="line">    clock                         clock.Clock</span><br><span class="line">    logger                        lager.Logger</span><br><span class="line">    startingContainerWeight       <span class="keyword">float64</span></span><br><span class="line">    startingContainerCountMaximum <span class="keyword">int</span> <span class="comment">// &lt;=0 means no limit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在看Schedule的方法介绍：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Schedule takes in a set of job requests (LRP start auctions and task starts) and</span></span><br><span class="line"><span class="comment">assigns the work to available cells according to the diego scoring algorithm. The</span></span><br><span class="line"><span class="comment">scheduler is single-threaded.  It determines scheduling of jobs one at a time so</span></span><br><span class="line"><span class="comment">that each calculation reflects available resources correctly.  It commits the</span></span><br><span class="line"><span class="comment">work in batches at the end, for better network performance.  Schedule returns</span></span><br><span class="line"><span class="comment">AuctionResults, indicating the success or failure of each requested job.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>在Schedule方法中，通过对任务进行排序和分割，然后分别调用schedule.scheduleLRPAuction和schedule.scheduleTaskAuction方法来进行调度执行，方法详情如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scheduler)</span> <span class="title">scheduleLRPAuction</span><span class="params">(lrpAuction *auctiontypes.LRPAuction)</span> <span class="params">(*auctiontypes.LRPAuction, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> winnerCell *Cell</span><br><span class="line">    winnerScore := <span class="number">1e20</span></span><br><span class="line"></span><br><span class="line">    zones := accumulateZonesByInstances(s.zones, lrpAuction.ProcessGuid)</span><br><span class="line"></span><br><span class="line">    filteredZones, err := filterZones(zones, lrpAuction)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sortedZones := sortZonesByInstances(filteredZones)</span><br><span class="line">    problems := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;<span class="string">"disk"</span>: <span class="keyword">struct</span>&#123;&#125;&#123;&#125;, <span class="string">"memory"</span>: <span class="keyword">struct</span>&#123;&#125;&#123;&#125;, <span class="string">"containers"</span>: <span class="keyword">struct</span>&#123;&#125;&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    s.logger.Info(<span class="string">"schedule-lrp-auction"</span>, lager.Data&#123;<span class="string">"problems"</span>: problems&#125;)</span><br><span class="line">    <span class="keyword">for</span> zoneIndex, lrpByZone := <span class="keyword">range</span> sortedZones &#123;</span><br><span class="line">        <span class="keyword">for</span> _, cell := <span class="keyword">range</span> lrpByZone.zone &#123;</span><br><span class="line">            score, err := cell.ScoreForLRP(&amp;lrpAuction.LRP, s.startingContainerWeight)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                removeNonApplicableProblems(problems, err)</span><br><span class="line">                s.logger.Info(<span class="string">"schedule-lrp-auction-after-error"</span>, lager.Data&#123;<span class="string">"problems"</span>: problems, <span class="string">"error"</span>: err&#125;)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> score &lt; winnerScore &#123;</span><br><span class="line">                winnerScore = score</span><br><span class="line">                winnerCell = cell</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (not last zone) &amp;&amp; (this zone has the same # of instances as the next sorted zone)</span></span><br><span class="line">        <span class="comment">// acts as a tie breaker</span></span><br><span class="line">        <span class="keyword">if</span> zoneIndex+<span class="number">1</span> &lt; <span class="built_in">len</span>(sortedZones) &amp;&amp;</span><br><span class="line">            lrpByZone.instances == sortedZones[zoneIndex+<span class="number">1</span>].instances &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> winnerCell != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> winnerCell == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, &amp;rep.InsufficientResourcesError&#123;Problems: problems&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = winnerCell.ReserveLRP(&amp;lrpAuction.LRP)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        s.logger.Error(<span class="string">"lrp-failed-to-reserve-cell"</span>, err, lager.Data&#123;<span class="string">"cell-guid"</span>: winnerCell.Guid, <span class="string">"lrp-guid"</span>: lrpAuction.Identifier()&#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    winningAuction := lrpAuction.Copy()</span><br><span class="line">    winningAuction.Winner = winnerCell.Guid</span><br><span class="line">    <span class="keyword">return</span> &amp;winningAuction, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以首先通过对每个zone，在对每个zone中的每个cell进行查找，已找到每个zone对应的instance的个数(这里的processGuid不是很清楚，需要后面确定)，然后进行filter，filterZones方法的代码如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">filterZones</span><span class="params">(zones []lrpByZone, lrpAuction *auctiontypes.LRPAuction)</span> <span class="params">([]lrpByZone, error)</span></span> &#123;</span><br><span class="line">    filteredZones := []lrpByZone&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> zoneError error</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, lrpZone := <span class="keyword">range</span> zones &#123;</span><br><span class="line">        cells, err := lrpZone.zone.filterCells(lrpAuction.PlacementConstraint)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            _, isZoneErrorPlacementTagMismatchError := zoneError.(auctiontypes.PlacementTagMismatchError)</span><br><span class="line">            _, isErrPlacementTagMismatchError := err.(auctiontypes.PlacementTagMismatchError)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isZoneErrorPlacementTagMismatchError ||</span><br><span class="line">                (zoneError == auctiontypes.ErrorVolumeDriverMismatch &amp;&amp; isErrPlacementTagMismatchError) ||</span><br><span class="line">                zoneError == auctiontypes.ErrorCellMismatch || zoneError == <span class="literal">nil</span> &#123;</span><br><span class="line">                zoneError = err</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filteredZone := lrpByZone&#123;</span><br><span class="line">            zone:      Zone(cells),</span><br><span class="line">            instances: lrpZone.instances,</span><br><span class="line">        &#125;</span><br><span class="line">        filteredZones = <span class="built_in">append</span>(filteredZones, filteredZone)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(filteredZones) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, zoneError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filteredZones, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中对每个zone中的cell进行了帅选，其中帅选的条件包括Rootfs, VolumeDriver, PlacementTags, 已选择合适的cell进行实例的启动操作：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(z *Zone)</span> <span class="title">filterCells</span><span class="params">(pc rep.PlacementConstraint)</span> <span class="params">([]*Cell, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cells = <span class="built_in">make</span>([]*Cell, <span class="number">0</span>, <span class="built_in">len</span>(*z))</span><br><span class="line">    err := auctiontypes.ErrorCellMismatch</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, cell := <span class="keyword">range</span> *z &#123;</span><br><span class="line">        <span class="keyword">if</span> cell.MatchRootFS(pc.RootFs) &#123;</span><br><span class="line">            <span class="keyword">if</span> err == auctiontypes.ErrorCellMismatch &#123;</span><br><span class="line">                err = auctiontypes.ErrorVolumeDriverMismatch</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cell.MatchVolumeDrivers(pc.VolumeDrivers) &#123;</span><br><span class="line">                <span class="keyword">if</span> err == auctiontypes.ErrorVolumeDriverMismatch &#123;</span><br><span class="line">                    err = auctiontypes.NewPlacementTagMismatchError(pc.PlacementTags)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> cell.MatchPlacementTags(pc.PlacementTags) &#123;</span><br><span class="line">                    err = <span class="literal">nil</span></span><br><span class="line">                    cells = <span class="built_in">append</span>(cells, cell)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cells, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在完成帅选的过程后，schedule对选择的zones进行了排序，然后开始对zones中的cell进行评分，已达到选择最优的cell的目的，这个过程是贪心的，即在这个zone中完成了最优的cell的帅选，就break，然后执行winnerCell.ReserveLRP(&amp;lrpAuction.LRP)来确定。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cell)</span> <span class="title">ReserveLRP</span><span class="params">(lrp *rep.LRP)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    err := c.state.ResourceMatch(&amp;lrp.Resource)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.state.AddLRP(lrp)</span><br><span class="line">    c.workToCommit.LRPs = <span class="built_in">append</span>(c.workToCommit.LRPs, *lrp)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后再看Cell的数据结构，基本可以了解其对其他组件的交互逻辑：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cell <span class="keyword">struct</span> &#123;</span><br><span class="line">    logger lager.Logger</span><br><span class="line">    Guid   <span class="keyword">string</span></span><br><span class="line">    client rep.Client</span><br><span class="line">    state  rep.CellState</span><br><span class="line"></span><br><span class="line">    workToCommit rep.Work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们再看schedule的提交任务的代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failedWorks := s.commitCells()</span><br></pre></td></tr></table></figure></p><p>这个方法的实现如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scheduler)</span> <span class="title">commitCells</span><span class="params">()</span> []<span class="title">rep</span>.<span class="title">Work</span></span> &#123;</span><br><span class="line">    wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, cells := <span class="keyword">range</span> s.zones &#123;</span><br><span class="line">        wg.Add(<span class="built_in">len</span>(cells))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lock := &amp;sync.Mutex&#123;&#125;</span><br><span class="line">    failedWorks := []rep.Work&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, cells := <span class="keyword">range</span> s.zones &#123;</span><br><span class="line">        <span class="keyword">for</span> _, cell := <span class="keyword">range</span> cells &#123;</span><br><span class="line">            cell := cell</span><br><span class="line">            s.workPool.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="keyword">defer</span> wg.Done()</span><br><span class="line">                failedWork := cell.Commit()</span><br><span class="line"></span><br><span class="line">                lock.Lock()</span><br><span class="line">                failedWorks = <span class="built_in">append</span>(failedWorks, failedWork)</span><br><span class="line">                lock.Unlock()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">return</span> failedWorks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码很有意思，可以分析一下，先说说WaitGroup的用途：它能够一直等到所有的goroutine执行完成，并且阻塞主线程的执行，直到所有的goroutine执行完成。</p><p>WaitGroup总共有三个方法：Add(delta int),Done(),Wait()。简单的说一下这三个方法的作用。</p><p>Add:添加或者减少等待goroutine的数量</p><p>Done:相当于Add(-1)</p><p>Wait:执行阻塞，直到所有的WaitGroup数量变成0</p><p><br> 所以上面这段代码通过sync.waitGroup来讲需要存放实例的cell的数量入其中，然后调用workPool协程池将任务提交到其中，其中submit函数中defer wg.Done()表示每当完成一个任务就减一。在最后面，执行wg.Wait（）阻塞，直到队列中所有的任务结束。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cell)</span> <span class="title">Commit</span><span class="params">()</span> <span class="title">rep</span>.<span class="title">Work</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(c.workToCommit.LRPs) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c.workToCommit.Tasks) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rep.Work&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    failedWork, err := c.client.Perform(c.logger, c.workToCommit)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.logger.Error(<span class="string">"failed-to-commit"</span>, err, lager.Data&#123;<span class="string">"cell-guid"</span>: c.Guid&#125;)</span><br><span class="line">        <span class="comment">//an error may indicate partial failure</span></span><br><span class="line">        <span class="comment">//in this case we don't reschedule work in order to make sure we don't</span></span><br><span class="line">        <span class="comment">//create duplicates of things -- we'll let the converger figure things out for us later</span></span><br><span class="line">        <span class="keyword">return</span> rep.Work&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> failedWork</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Cell.client.Perform来执行真是的任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The auction package in this repository encodes the details behind Diego’s scheduling mechanism. There are two components in Diego that pa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Connecting BBS with Kubernetes</title>
    <link href="http://yoursite.com/2018/09/06/Connecting%20BBS%20with%20Kubernetes/"/>
    <id>http://yoursite.com/2018/09/06/Connecting BBS with Kubernetes/</id>
    <published>2018-09-06T13:57:58.000Z</published>
    <updated>2017-07-24T01:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Diego’s Bulletin Board System (BBS) is the central data store and orchestrator of a Diego cluster. It communicates via protocol-buffer-encoded RPC-style calls over HTTP.</p><h3 id="承上启下"><a href="#承上启下" class="headerlink" title="承上启下"></a>承上启下</h3><p>如果想讲Diego的核心替换成kubernetes，已提供更好的服务，经过上面的调研，如果想让这个想法work，成本最低的就是为kubernetes设计并实现一个diego的server来相应BBS所有的http请求，以上面讨论的LRP相关的request来说,因为关于LRP元信息都存储在BBS的db(etcd/sql)中，所以这部分的操作完全不用改动，需要改动的是auctioneer server端相应的逻辑代码，并将其移植到kubernetes上，还有rep端相应rep.ClientFactory请求的server端的逻辑代码。关于auctioneer.Client请求的内容为LRPStartRequest和TaskStartRequest,从auctioneer/resources.go相关的代码中可知：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TaskStartRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    rep.Task</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LRPStartRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    ProcessGuid <span class="keyword">string</span> <span class="string">`json:"process_guid"`</span></span><br><span class="line">    Domain      <span class="keyword">string</span> <span class="string">`json:"domain"`</span></span><br><span class="line">    Indices     []<span class="keyword">int</span>  <span class="string">`json:"indices"`</span></span><br><span class="line">    rep.PlacementConstraint</span><br><span class="line">    rep.Resource</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Deep-into-rep"><a href="#Deep-into-rep" class="headerlink" title="Deep into rep"></a>Deep into rep</h3><p>因为Auctioneer.Client提供的功能就是向Rep提供这样的数据，关于Auctioneer Server端的逻辑，需要进一步的调研，以及RepClient端提供的功能也需要调研。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Diego’s Bulletin Board System (BBS) is the central data store and orchestrator of a Diego cluster. It communicates via protocol-buffer-en
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rep in Cloud Foundry</title>
    <link href="http://yoursite.com/2018/09/06/RepCF/"/>
    <id>http://yoursite.com/2018/09/06/RepCF/</id>
    <published>2018-09-06T13:57:58.000Z</published>
    <updated>2017-07-24T01:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>The Rep bids on tasks and schedules them on an associated Executor.Rep是Diego中真正完成lrp和tasks的任务的模块，其也是通过http来接收了处理相关的请求。</p><h3 id="routes-of-rep"><a href="#routes-of-rep" class="headerlink" title="routes of rep"></a>routes of rep</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRoutes</span><span class="params">(secure <span class="keyword">bool</span>)</span> <span class="title">rata</span>.<span class="title">Routes</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> routes rata.Routes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> secure &#123;</span><br><span class="line">        routes = <span class="built_in">append</span>(routes,</span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/state"</span>, Method: <span class="string">"GET"</span>, Name: StateRoute&#125;,</span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/work"</span>, Method: <span class="string">"POST"</span>, Name: PerformRoute&#125;,</span><br><span class="line"></span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/v1/lrps/:process_guid/instances/:instance_guid/stop"</span>, Method: <span class="string">"POST"</span>, Name: StopLRPInstanceRoute&#125;,</span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/v1/tasks/:task_guid/cancel"</span>, Method: <span class="string">"POST"</span>, Name: CancelTaskRoute&#125;,</span><br><span class="line"></span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/sim/reset"</span>, Method: <span class="string">"POST"</span>, Name: Sim_ResetRoute&#125;,</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !secure &#123;</span><br><span class="line">        routes = <span class="built_in">append</span>(routes,</span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/ping"</span>, Method: <span class="string">"GET"</span>, Name: PingRoute&#125;,</span><br><span class="line">            rata.Route&#123;Path: <span class="string">"/evacuate"</span>, Method: <span class="string">"POST"</span>, Name: EvacuateRoute&#125;,</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> routes</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RoutesInsecure = NewRoutes(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">var</span> RoutesSecure = NewRoutes(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">var</span> Routes = <span class="built_in">append</span>(RoutesInsecure, RoutesSecure...)</span><br></pre></td></tr></table></figure><p>然后在rep/handlers/handlers.go文件中定义了每个route对应的http handler:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    localCellClient auctioncellrep.AuctionCellClient,</span></span></span><br><span class="line"><span class="function"><span class="params">    executorClient executor.Client,</span></span></span><br><span class="line"><span class="function"><span class="params">    evacuatable evacuation_context.Evacuatable,</span></span></span><br><span class="line"><span class="function"><span class="params">    logger lager.Logger,</span></span></span><br><span class="line"><span class="function"><span class="params">    secure <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="title">rata</span>.<span class="title">Handlers</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    handlers := rata.Handlers&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> secure &#123;</span><br><span class="line">        stateHandler := &amp;state&#123;rep: localCellClient&#125;</span><br><span class="line">        performHandler := &amp;perform&#123;rep: localCellClient&#125;</span><br><span class="line">        resetHandler := &amp;reset&#123;rep: localCellClient&#125;</span><br><span class="line">        stopLrpHandler := NewStopLRPInstanceHandler(executorClient)</span><br><span class="line">        cancelTaskHandler := NewCancelTaskHandler(executorClient)</span><br><span class="line"></span><br><span class="line">        handlers[rep.StateRoute] = logWrap(stateHandler.ServeHTTP, logger)</span><br><span class="line">        handlers[rep.PerformRoute] = logWrap(performHandler.ServeHTTP, logger)</span><br><span class="line">        handlers[rep.Sim_ResetRoute] = logWrap(resetHandler.ServeHTTP, logger)</span><br><span class="line"></span><br><span class="line">        handlers[rep.StopLRPInstanceRoute] = logWrap(stopLrpHandler.ServeHTTP, logger)</span><br><span class="line">        handlers[rep.CancelTaskRoute] = logWrap(cancelTaskHandler.ServeHTTP, logger)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pingHandler := NewPingHandler()</span><br><span class="line">        evacuationHandler := NewEvacuationHandler(evacuatable)</span><br><span class="line"></span><br><span class="line">        handlers[rep.PingRoute] = logWrap(pingHandler.ServeHTTP, logger)</span><br><span class="line">        handlers[rep.EvacuateRoute] = logWrap(evacuationHandler.ServeHTTP, logger)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handlers</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="handlers-of-route"><a href="#handlers-of-route" class="headerlink" title="handlers of route"></a>handlers of route</h3><p>在每一个handler中，存在一个非常重要的数据结构CellState :<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CellState <span class="keyword">struct</span> &#123;</span><br><span class="line">    RootFSProviders        RootFSProviders</span><br><span class="line">    AvailableResources     Resources</span><br><span class="line">    TotalResources         Resources</span><br><span class="line">    LRPs                   []LRP</span><br><span class="line">    Tasks                  []Task</span><br><span class="line">    StartingContainerCount <span class="keyword">int</span></span><br><span class="line">    Zone                   <span class="keyword">string</span></span><br><span class="line">    Evacuating             <span class="keyword">bool</span></span><br><span class="line">    VolumeDrivers          []<span class="keyword">string</span></span><br><span class="line">    PlacementTags          []<span class="keyword">string</span></span><br><span class="line">    OptionalPlacementTags  []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们在一个一个看每个handler的业务逻辑，从上面的代码可以看出，每个hanlder都进行了封装，stateHandler实际上就是实现了一个接口：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AuctionCellClient <span class="keyword">interface</span> &#123;</span><br><span class="line">    State(logger lager.Logger) (rep.CellState, <span class="keyword">bool</span>, error)</span><br><span class="line">    Perform(logger lager.Logger, work rep.Work) (rep.Work, error)</span><br><span class="line">    Reset() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AuctionCellRep <span class="keyword">struct</span> &#123;</span><br><span class="line">    cellID                <span class="keyword">string</span></span><br><span class="line">    stackPathMap          rep.StackPathMap</span><br><span class="line">    rootFSProviders       rep.RootFSProviders</span><br><span class="line">    stack                 <span class="keyword">string</span></span><br><span class="line">    zone                  <span class="keyword">string</span></span><br><span class="line">    generateInstanceGuid  <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span></span><br><span class="line"><span class="function">    <span class="title">client</span>                <span class="title">executor</span>.<span class="title">Client</span></span></span><br><span class="line"><span class="function">    <span class="title">evacuationReporter</span>    <span class="title">evacuation_context</span>.<span class="title">EvacuationReporter</span></span></span><br><span class="line"><span class="function">    <span class="title">placementTags</span>         []<span class="title">string</span></span></span><br><span class="line"><span class="function">    <span class="title">optionalPlacementTags</span> []<span class="title">string</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>因为任何实现了这三个方法的对象都算是继承了AuctionCellClient的接口，进入当前文件的State, Perform, Reset方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// State currently does not return tasks or lrp rootfs, because the</span></span><br><span class="line"><span class="comment">// auctioneer currently does not need them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AuctionCellRep)</span> <span class="title">State</span><span class="params">(logger lager.Logger)</span> <span class="params">(rep.CellState, <span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">    logger = logger.Session(<span class="string">"auction-state"</span>)</span><br><span class="line">    logger.Info(<span class="string">"providing"</span>)</span><br><span class="line"></span><br><span class="line">    containers, err := a.client.ListContainers(logger)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-to-fetch-containers"</span>, err)</span><br><span class="line">        <span class="keyword">return</span> rep.CellState&#123;&#125;, <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    totalResources, err := a.client.TotalResources(logger)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-to-get-total-resources"</span>, err)</span><br><span class="line">        <span class="keyword">return</span> rep.CellState&#123;&#125;, <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    availableResources, err := a.client.RemainingResources(logger)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-to-get-remaining-resource"</span>, err)</span><br><span class="line">        <span class="keyword">return</span> rep.CellState&#123;&#125;, <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    volumeDrivers, err := a.client.VolumeDrivers(logger)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-to-get-volume-drivers"</span>, err)</span><br><span class="line">        <span class="keyword">return</span> rep.CellState&#123;&#125;, <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> key *models.ActualLRPKey</span><br><span class="line">    <span class="keyword">var</span> keyErr error</span><br><span class="line">    lrps := []rep.LRP&#123;&#125;</span><br><span class="line">    tasks := []rep.Task&#123;&#125;</span><br><span class="line">    startingContainerCount := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> containers &#123;</span><br><span class="line">        container := &amp;containers[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> containerIsStarting(container) &#123;</span><br><span class="line">            startingContainerCount++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> container.Tags == <span class="literal">nil</span> &#123;</span><br><span class="line">            logger.Error(<span class="string">"failed-to-extract-container-tags"</span>, <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resource := rep.Resource&#123;MemoryMB: <span class="keyword">int32</span>(container.MemoryMB), DiskMB: <span class="keyword">int32</span>(container.DiskMB)&#125;</span><br><span class="line">        placementConstraint := rep.PlacementConstraint&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> container.Tags[rep.LifecycleTag] &#123;</span><br><span class="line">        <span class="keyword">case</span> rep.LRPLifecycle:</span><br><span class="line">            key, keyErr = rep.ActualLRPKeyFromTags(container.Tags)</span><br><span class="line">            <span class="keyword">if</span> keyErr != <span class="literal">nil</span> &#123;</span><br><span class="line">                logger.Error(<span class="string">"failed-to-extract-key"</span>, keyErr)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            lrps = <span class="built_in">append</span>(lrps, rep.NewLRP(*key, resource, placementConstraint))</span><br><span class="line">        <span class="keyword">case</span> rep.TaskLifecycle:</span><br><span class="line">            domain := container.Tags[rep.DomainTag]</span><br><span class="line">            tasks = <span class="built_in">append</span>(tasks, rep.NewTask(container.Guid, domain, resource, placementConstraint))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    state := rep.NewCellState(</span><br><span class="line">        a.rootFSProviders,</span><br><span class="line">        a.convertResources(availableResources),</span><br><span class="line">        a.convertResources(totalResources),</span><br><span class="line">        lrps,</span><br><span class="line">        tasks,</span><br><span class="line">        a.zone,</span><br><span class="line">        startingContainerCount,</span><br><span class="line">        a.evacuationReporter.Evacuating(),</span><br><span class="line">        volumeDrivers,</span><br><span class="line">        a.placementTags,</span><br><span class="line">        a.optionalPlacementTags,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    healthy := a.client.Healthy(logger)</span><br><span class="line">    <span class="keyword">if</span> !healthy &#123;</span><br><span class="line">        logger.Error(<span class="string">"failed-garden-health-check"</span>, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.Info(<span class="string">"provided"</span>, lager.Data&#123;</span><br><span class="line">        <span class="string">"available-resources"</span>: state.AvailableResources,</span><br><span class="line">        <span class="string">"total-resources"</span>:     state.TotalResources,</span><br><span class="line">        <span class="string">"num-lrps"</span>:            <span class="built_in">len</span>(state.LRPs),</span><br><span class="line">        <span class="string">"zone"</span>:                state.Zone,</span><br><span class="line">        <span class="string">"evacuating"</span>:          state.Evacuating,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state, healthy, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从state中可以看出，其调用executor.client来获取当前系统中的container, 总资源，剩余资源，最后讲得到的信息形成LRP和tasks，并放在state上返回，即可得到当前系统中的所有相关信息。</p><p><br>下面在看接口Perform方法的实现：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AuctionCellRep)</span> <span class="title">Perform</span><span class="params">(logger lager.Logger, work rep.Work)</span> <span class="params">(rep.Work, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> failedWork = rep.Work&#123;&#125;</span><br><span class="line"></span><br><span class="line">    logger = logger.Session(<span class="string">"auction-work"</span>, lager.Data&#123;</span><br><span class="line">        <span class="string">"lrp-starts"</span>: <span class="built_in">len</span>(work.LRPs),</span><br><span class="line">        <span class="string">"tasks"</span>:      <span class="built_in">len</span>(work.Tasks),</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a.evacuationReporter.Evacuating() &#123;</span><br><span class="line">        <span class="keyword">return</span> work, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(work.LRPs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        lrpLogger := logger.Session(<span class="string">"lrp-allocate-instances"</span>)</span><br><span class="line"></span><br><span class="line">        requests, lrpMap, untranslatedLRPs := a.lrpsToAllocationRequest(work.LRPs)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(untranslatedLRPs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            lrpLogger.Info(<span class="string">"failed-to-translate-lrps-to-containers"</span>, lager.Data&#123;<span class="string">"num-failed-to-translate"</span>: <span class="built_in">len</span>(untranslatedLRPs)&#125;)</span><br><span class="line">            failedWork.LRPs = untranslatedLRPs</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lrpLogger.Info(<span class="string">"requesting-container-allocation"</span>, lager.Data&#123;<span class="string">"num-requesting-allocation"</span>: <span class="built_in">len</span>(requests)&#125;)</span><br><span class="line">        failures, err := a.client.AllocateContainers(logger, requests)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            lrpLogger.Error(<span class="string">"failed-requesting-container-allocation"</span>, err)</span><br><span class="line">            failedWork.LRPs = work.LRPs</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lrpLogger.Info(<span class="string">"succeeded-requesting-container-allocation"</span>, lager.Data&#123;<span class="string">"num-failed-to-allocate"</span>: <span class="built_in">len</span>(failures)&#125;)</span><br><span class="line">            <span class="keyword">for</span> i := <span class="keyword">range</span> failures &#123;</span><br><span class="line">                failure := &amp;failures[i]</span><br><span class="line">                lrpLogger.Error(<span class="string">"container-allocation-failure"</span>, failure, lager.Data&#123;<span class="string">"failed-request"</span>: &amp;failure.AllocationRequest&#125;)</span><br><span class="line">                <span class="keyword">if</span> lrp, found := lrpMap[failure.Guid]; found &#123;</span><br><span class="line">                    failedWork.LRPs = <span class="built_in">append</span>(failedWork.LRPs, *lrp)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(work.Tasks) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        taskLogger := logger.Session(<span class="string">"task-allocate-instances"</span>)</span><br><span class="line"></span><br><span class="line">        requests, taskMap, failedTasks := a.tasksToAllocationRequests(work.Tasks)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(failedTasks) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            taskLogger.Info(<span class="string">"failed-to-translate-tasks-to-containers"</span>, lager.Data&#123;<span class="string">"num-failed-to-translate"</span>: <span class="built_in">len</span>(failedTasks)&#125;)</span><br><span class="line">            failedWork.Tasks = failedTasks</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        taskLogger.Info(<span class="string">"requesting-container-allocation"</span>, lager.Data&#123;<span class="string">"num-requesting-allocation"</span>: <span class="built_in">len</span>(requests)&#125;)</span><br><span class="line">        failures, err := a.client.AllocateContainers(logger, requests)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            taskLogger.Error(<span class="string">"failed-requesting-container-allocation"</span>, err)</span><br><span class="line">            failedWork.Tasks = work.Tasks</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            taskLogger.Info(<span class="string">"succeeded-requesting-container-allocation"</span>, lager.Data&#123;<span class="string">"num-failed-to-allocate"</span>: <span class="built_in">len</span>(failures)&#125;)</span><br><span class="line">            <span class="keyword">for</span> i := <span class="keyword">range</span> failures &#123;</span><br><span class="line">                failure := &amp;failures[i]</span><br><span class="line">                taskLogger.Error(<span class="string">"container-allocation-failure"</span>, failure, lager.Data&#123;<span class="string">"failed-request"</span>: &amp;failure.AllocationRequest&#125;)</span><br><span class="line">                <span class="keyword">if</span> task, found := taskMap[failure.Guid]; found &#123;</span><br><span class="line">                    failedWork.Tasks = <span class="built_in">append</span>(failedWork.Tasks, *task)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> failedWork, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中可见，通过传入的work(rep.Work)，代码将其分成了两类任务，lrp和tasks，关于lrp任务，首先调用AuctionCellRep.lrpsToAllocationRequest()来转化成requests,然后调用a.client.AllocateContainers(requests)来处理请求,并对后面的失败的任务进行了一个重启的过程。<br><br>关于tasks，处理的逻辑差不多，最后返回的是失败的任务。<br>关于reset的代码很简单，如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AuctionCellRep)</span> <span class="title">Reset</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">"not-a-simulation-rep"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="另一类处理方式"><a href="#另一类处理方式" class="headerlink" title="另一类处理方式"></a>另一类处理方式</h3><p>对于stopLrpHandler和cancelTaskHandler句柄，分别调用了executor的相关实现：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StopLRPInstanceHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">    client executor.Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStopLRPInstanceHandler</span><span class="params">(client executor.Client)</span> *<span class="title">StopLRPInstanceHandler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;StopLRPInstanceHandler&#123;</span><br><span class="line">        client: client,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h StopLRPInstanceHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request, logger lager.Logger)</span></span> &#123;</span><br><span class="line">    processGuid := r.FormValue(<span class="string">":process_guid"</span>)</span><br><span class="line">    instanceGuid := r.FormValue(<span class="string">":instance_guid"</span>)</span><br><span class="line"></span><br><span class="line">    logger = logger.Session(<span class="string">"handling-stop-lrp-instance"</span>, lager.Data&#123;</span><br><span class="line">        <span class="string">"process-guid"</span>:  processGuid,</span><br><span class="line">        <span class="string">"instance-guid"</span>: instanceGuid,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> processGuid == <span class="string">""</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"missing-process-guid"</span>, errors.New(<span class="string">"process_guid missing from request"</span>))</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instanceGuid == <span class="string">""</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">"missing-instance-guid"</span>, errors.New(<span class="string">"instance_guid missing from request"</span>))</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err := h.client.StopContainer(logger, rep.LRPContainerGuid(processGuid, instanceGuid))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">        logger.Error(<span class="string">"failed-to-stop-container"</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见，其调用了h.client.StopContainer的方法来实现了功能该需求。另外一个也是类似，就不一一列举了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The Rep bids on tasks and schedules them on an associated Executor.Rep是Diego中真正完成lrp和tasks的任务的模块，其也是通过http来接收了处理相关的请求。&lt;/p&gt;
&lt;h3 id=&quot;routes
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>What&#39;s thread-safety</title>
    <link href="http://yoursite.com/2018/09/05/what-s-thread-safe/"/>
    <id>http://yoursite.com/2018/09/05/what-s-thread-safe/</id>
    <published>2018-09-05T11:53:11.000Z</published>
    <updated>2018-09-06T03:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread-safety"><a href="#Thread-safety" class="headerlink" title="Thread safety"></a>Thread safety</h1><p>线程安全是应用在多线程代码上的一种计算机编程概念。线程安全的代码在操作共享的数据时保证了所有线程安全地按照逻辑进行执行，而不会出现意想不到的影响。有多重方法或策略来完成线程安全的数据结构。</p><p>应用程序可能在多个线程中执行同一段共享地址空间的代码，其中每一个线程可以访问到其他所有的线程中的内存。线程安全是一种允许代码执行在多线程环境中的性质，其通过<a href="https://en.wikipedia.org/wiki/Synchronization_%28computer_science%29" target="_blank" rel="noopener">同步</a>来重新建立实际控制流与程序文本之间的一些对应关系。</p><h2 id="1-线程安全的级别"><a href="#1-线程安全的级别" class="headerlink" title="1.线程安全的级别"></a>1.线程安全的级别</h2><p>软件库可以提供一些线程安全的保证。比如，并发地读文本可以保证是线程安全的，但是并发地写可能就不是。使用这种库的程序是否是线程安全的取决于它是否以与这些保证一致的方式来使用库。</p><p>不同的材料对线程安全使用略有不同的术语：</p><ul><li>线程安全的：实现上是保证在多个线程同时访问（执行）时竞争条件自由的。</li><li>条件安全的：不同的线程可以同时访问不同的对象，并且，对共享的数据是被保护起来免于竞争的。</li><li>线程不全的：代码不能被不同的线程同时访问（执行）。</li></ul><p>线程安全保证通常还包括防止或者限制不同形式的死锁的风险的设计步骤，以及并发性能最大化的优化。但是，无法始终给出无死锁保证，因为死锁可能是由回调和违反独立于库本身的架构分层引起的。</p><h2 id="2-方法的实现"><a href="#2-方法的实现" class="headerlink" title="2.方法的实现"></a>2.方法的实现</h2><p>下面讨论两种方法来达到避免条件竞争的目的。其中，第一种方法专注于避免共享状态，包括如下：</p><ul><li><a href="https://en.wikipedia.org/wiki/Reentrancy_%28computing%29" target="_blank" rel="noopener">可重入性</a><br>以这样的方式编写代码，使其可以由一个线程部分地执行，由同一个线程重新执行或者有另外一个线程同时执行，并依然正确的完成原始的操作。这需要将状态信息保存在每个执行的本地变量中，通常在堆栈上，而不是静态或全局变量或其他非本地状态。 必须通过原子操作访问所有非本地状态，并且数据结构也必须是可重入的。</li><li><a href="https://en.wikipedia.org/wiki/Thread-local_storage#Java" target="_blank" rel="noopener">线程本地存储</a><br>变量已本地化，因此每个线程都有自己的私有副本。 这些变量在子例程和其他代码边界中保留其值，并且是线程安全的，因为它们对于每个线程是本地的，即使访问它们的代码可能由另一个线程同时执行。</li><li><a href="https://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="noopener">不可变对象</a><br>对象的状态在构建后不可改变。这意味着只共享只读数据并获得固有的线程安全性。 然后可以以这样的方式实现可变（非常量）操作，即它们创建新对象而不是修改现有对象。 这种方法是函数式编程的特征，也可用于Java，C＃和Python中的字符串实现。</li></ul><p>第二种类型的方法是与同步相关的，其被使用在共享状态是无法避免的情况下:</p><ul><li><a href="https://en.wikipedia.org/wiki/Mutual_exclusion" target="_blank" rel="noopener">互斥</a><br>使用确保只有一个线程可以随时读取或写入共享数据的机制来串行化对共享数据的访问。合并互斥需要经过深思熟虑，因为不当使用会导致诸如死锁，活锁和资源匮乏等副作用。</li><li><a href="https://en.wikipedia.org/wiki/Linearizability" target="_blank" rel="noopener">原子操作</a><br>通过使用不能被其他线程中断的原子操作来访问共享数据。 这通常需要使用特殊的机器语言指令，这些指令可能在运行时库中可用。 由于操作是原子操作，因此无论其他线程如何访问它，共享数据始终保持有效状态。 原子操作构成了许多线程锁定机制的基础，并用于实现互斥原语。</li></ul><h2 id="3-样例"><a href="#3-样例" class="headerlink" title="3.样例"></a>3.样例</h2><p>如下例子是一段Java代码，方法是线程安全的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在C语言中，每一个线程都有自己的栈，但是，静态变量是不存放在栈中。所有的线程同时的访问它。如果多个线程同时运行，则一个线程可能会改变静态变量，而另一个线程可能会在一个线程更改途中检查它，造成不合意的事情发生。这种难以诊断的逻辑错误，可以在大多数时间编译和运行正常，成为竞争条件。避免这种情况的一种常见的方法是使用另一个共享变量作为“锁定”或“互斥”。</p><p>在下面的一段C语言代码中，方法是线程安全的，但是不可重入的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">increment_counter</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// only allow one thread to increment at a time</span></span><br><span class="line"> pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"> ++counter;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// store value before any other threads increment it further</span></span><br><span class="line"> <span class="keyword">int</span> result = counter;</span><br><span class="line"></span><br><span class="line"> pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面，increment_counter可以由不同的线程调用而没有任何问题，因为互斥锁用于同步对共享计数器变量的所有访问。 但是如果函数在重入中断处理程序中使用并且函数内部出现第二个中断，则第二个例程将永久挂起。 由于中断服务可以禁用其他中断，整个系统可能会受到影响。</p><p>使用C++11中的无锁原子，可以将相同的函数实现为线程安全和可重入的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">increment_counter</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; counter(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// increment is guaranteed to be done atomically</span></span><br><span class="line"> <span class="keyword">int</span> result = ++counter;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h2><ul><li><a href="https://en.wikipedia.org/wiki/Concurrency_control" target="_blank" rel="noopener">Concurrency control</a></li><li><a href="https://en.wikipedia.org/wiki/Exception_safety" target="_blank" rel="noopener">Exception safety</a></li><li><a href="https://en.wikipedia.org/wiki/Priority_inversion" target="_blank" rel="noopener">Priority inversion</a></li><li><a href="https://en.wikipedia.org/wiki/ThreadSafe" target="_blank" rel="noopener">ThreadSafe</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Thread-safety&quot;&gt;&lt;a href=&quot;#Thread-safety&quot; class=&quot;headerlink&quot; title=&quot;Thread safety&quot;&gt;&lt;/a&gt;Thread safety&lt;/h1&gt;&lt;p&gt;线程安全是应用在多线程代码上的一种计算机编程概念。线
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java exception</title>
    <link href="http://yoursite.com/2018/08/22/Java-exception/"/>
    <id>http://yoursite.com/2018/08/22/Java-exception/</id>
    <published>2018-08-22T02:39:49.000Z</published>
    <updated>2018-08-22T03:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Java 异常时定义在程序执行时，出现异常情况或问题的对象。其通常使用try….catch代码块来抛出以及捕捉。其中，需要注意的是，异常和错误在程序中是不同的；错误表示程序无法正常恢复，而异常，一般来说是可以处理的问题，例如除法中分母为0的情况。</p><p>异常代表着在程序执行过程中需要特别注意的一些异常的情况或者问题，对于这些问题，在它们出现之前进行处理是可能的。</p><h2 id="2-Java异常分类"><a href="#2-Java异常分类" class="headerlink" title="2.Java异常分类"></a>2.Java异常分类</h2><p>Java对异常的组织是比较简单的，其中所有的错误和异常都继承自Throwable。其中错误以及运行时异常都是未受检异常，这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止，让调用者对代码进行修正。如我上面例子的ArrayIndexOutOfBoundsException就是这类异常。</p><p>对于已检查异常，只要是Exception和其子类都是，除了特殊子类RuntimeException体系。 这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。这样的问题都可以针对性的处理。如ClassNotFoundException就是这类异常。</p><p><img src="/image/built_in_exception.png" alt="Exception class hierarchy"></p><h2 id="3-实际中处理异常的原则"><a href="#3-实际中处理异常的原则" class="headerlink" title="3.实际中处理异常的原则"></a>3.实际中处理异常的原则</h2><ol><li>函数内容如果抛出已检查的异常，那么函数上必须要声明。否则必须在函数内用try-catch捕获，否则编译失败。</li><li>如果调用到了声明已检查异常的函数，要么try-catch要么throws，否则编译失败。</li><li>什么时候catch，什么时候throws 呢？功能内容可以解决，用catch。解决不了，用throws告诉调用者，由调用者解决 。</li><li>一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。</li></ol><h2 id="4-参考资源"><a href="#4-参考资源" class="headerlink" title="4.参考资源"></a>4.参考资源</h2><ol><li><a href="https://blog.csdn.net/TimHeath/article/details/53504328" target="_blank" rel="noopener">Java异常介绍</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-exception-misdirection/index.html" target="_blank" rel="noopener">Java 异常处理的误区和经验总结</a></li><li><a href="https://www.developer.com/java/data/understanding-exception-handling-in-java.html" target="_blank" rel="noopener">Understanding Exception Handling in Java</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h2&gt;&lt;p&gt;Java 异常时定义在程序执行时，出现异常情况或问题的对象。其通常使用try….catch代码块来抛出以及捕捉。其中，需要注
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Cognition</title>
    <link href="http://yoursite.com/2018/08/03/Cognition/"/>
    <id>http://yoursite.com/2018/08/03/Cognition/</id>
    <published>2018-08-03T01:58:57.000Z</published>
    <updated>2018-09-19T07:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>人与人之间的差别从认知开始，又以认知结束，并且是一个不断自我强化的过程。</li><li>细致入微地观察，仔细全面地阅读，深刻痛苦地思考，平等热烈地讨论，积极高效地执行，细致入微的观察。</li><li>君子不器，不要给自己设限。</li><li>系统化的调研学习是非常重要的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;人与人之间的差别从认知开始，又以认知结束，并且是一个不断自我强化的过程。&lt;/li&gt;
&lt;li&gt;细致入微地观察，仔细全面地阅读，深刻痛苦地思考，平等热烈地讨论，积极高效地执行，细致入微的观察。&lt;/li&gt;
&lt;li&gt;君子不器，不要给自己设限。&lt;/li&gt;
&lt;li&gt;系统化的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/02/hello-world/"/>
    <id>http://yoursite.com/2018/08/02/hello-world/</id>
    <published>2018-08-02T09:40:45.000Z</published>
    <updated>2018-08-02T09:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dive into in kube-router</title>
    <link href="http://yoursite.com/2017/08/23/pub-sub-example-in-golang/"/>
    <id>http://yoursite.com/2017/08/23/pub-sub-example-in-golang/</id>
    <published>2017-08-23T06:34:55.000Z</published>
    <updated>2017-08-23T08:08:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在阅读kube-router的源代码时，它是使用kubernetes的client-go中的cache.NewIndererInformer来处理kubernetes中涉及各种资源变化的情况，然后使用对应的controller来进行涉及到网络的处理；</p><h2 id="services-watcher的设计和实现"><a href="#services-watcher的设计和实现" class="headerlink" title="services_watcher的设计和实现"></a>services_watcher的设计和实现</h2><p>其中关于kubernetes的服务watcher的数据结构如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> serviceWatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">    clientset         *kubernetes.Clientset</span><br><span class="line">    serviceController cache.Controller</span><br><span class="line">    serviceLister     cache.Indexer</span><br><span class="line">    broadcaster       *utils.Broadcaster</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上所示，serviceWatcher包括了client来确定相关资源，serviceController以及serviceLister是用来存储生成的Informer的，broadcaster是用来广播service资源出现的变化；<br>kube-router使用IndexedInformer来观察各种资源的状态，如下面的代码如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartServiceWatcher</span><span class="params">(clientset *kubernetes.Clientset, resyncPeriod time.Duration)</span> <span class="params">(*serviceWatcher, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    svcw := serviceWatcher&#123;&#125;</span><br><span class="line">    ServiceWatcher = &amp;svcw</span><br><span class="line"></span><br><span class="line">    eventHandler := cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">        AddFunc:    svcw.serviceAddEventHandler,</span><br><span class="line">        DeleteFunc: svcw.serviceDeleteEventHandler,</span><br><span class="line">        UpdateFunc: svcw.serviceAUpdateEventHandler,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    svcw.clientset = clientset</span><br><span class="line">    svcw.broadcaster = utils.NewBroadcaster()</span><br><span class="line">    lw := cache.NewListWatchFromClient(clientset.Core().RESTClient(), <span class="string">"services"</span>, metav1.NamespaceAll, fields.Everything())</span><br><span class="line">    svcw.serviceLister, svcw.serviceController = cache.NewIndexerInformer(</span><br><span class="line">        lw,</span><br><span class="line">        &amp;api.Service&#123;&#125;, resyncPeriod, eventHandler,</span><br><span class="line">        cache.Indexers&#123;cache.NamespaceIndex: cache.MetaNamespaceIndexFunc&#125;,</span><br><span class="line">    )</span><br><span class="line">    servicesStopCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> svcw.serviceController.Run(servicesStopCh)</span><br><span class="line">    <span class="keyword">return</span> &amp;svcw, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中关于cache.IndexedInformer的描述如下：<br>NewIndexerInformer returns a Indexer and a controller for populating the index while also providing event notifications. You should only used the returned Index for Get/List operations; Add/Modify/Deletes will cause the event notifications to be faulty.<br>Parameters:</p><ul><li>lw is list and watch functions for the source of the resource you want to be informed of.</li><li>objType is an object of the type that you expect to receive.</li><li>resyncPeriod: if non-zero, will re-list this often (you will get OnUpdate calls, even if nothing changed). Otherwise, re-list will be delayed as long as possible (until the upstream source closes the watch or times out, or you stop the controller).</li><li>h is the object you want notifications sent to.</li><li>indexers is the indexer for the received object type.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIndexerInformer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    lw ListerWatcher,</span></span></span><br><span class="line"><span class="function"><span class="params">    objType runtime.Object,</span></span></span><br><span class="line"><span class="function"><span class="params">    resyncPeriod time.Duration,</span></span></span><br><span class="line"><span class="function"><span class="params">    h ResourceEventHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">    indexers Indexers,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(Indexer, Controller)</span></span></span><br></pre></td></tr></table></figure><p>上面就说明了关于获取Index只能使用Get/List操作；</p><p>其中关于eventHandlerFunc，这些函数是被定义来当service的资源变化时，就会自动调用这些方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(svcw *serviceWatcher)</span> <span class="title">serviceAddEventHandler</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    service, ok := obj.(*api.Service)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    svcw.broadcaster.Notify(&amp;ServiceUpdate&#123;Op: ADD, Service: service&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(svcw *serviceWatcher)</span> <span class="title">serviceDeleteEventHandler</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    service, ok := obj.(*api.Service)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    svcw.broadcaster.Notify(&amp;ServiceUpdate&#123;Op: REMOVE, Service: service&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(svcw *serviceWatcher)</span> <span class="title">serviceAUpdateEventHandler</span><span class="params">(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    service, ok := newObj.(*api.Service)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !reflect.DeepEqual(newObj, oldObj) &#123;</span><br><span class="line">        svcw.broadcaster.Notify(&amp;ServiceUpdate&#123;Op: UPDATE, Service: service&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ServiceUpdate <span class="keyword">struct</span> &#123;</span><br><span class="line">    Service *api.Service</span><br><span class="line">    Op      Operation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上面所示对于出现的service的增加，删除，更新，serviceWatcher都会将这些消息通过广播的形式广播出去: secw.broadcaster.Notify; 那么现在有两个问题，第一：广播机制是如何实现的；第二：那些人是注册了这个广播；<br>关于第二个问题，广播的注册函数如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServiceUpdatesHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">    OnServiceUpdate(serviceUpdate *ServiceUpdate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(svcw *serviceWatcher)</span> <span class="title">RegisterHandler</span><span class="params">(handler ServiceUpdatesHandler)</span></span> &#123;</span><br><span class="line">    svcw.broadcaster.Add(utils.ListenerFunc(<span class="function"><span class="keyword">func</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        handler.OnServiceUpdate(instance.(*ServiceUpdate))</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上面所示serviceWatcher使用registerHandler来注册来讲广播的接收/处理者；任何实现了ServiceUpdateHandler接口里面的OnserviceUpdate方法的对象都可以；</p><h2 id="广播机制的设计和实现"><a href="#广播机制的设计和实现" class="headerlink" title="广播机制的设计和实现"></a>广播机制的设计和实现</h2><p>关于broadcaster的设计和实现，代码如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Listener <span class="keyword">interface</span> &#123;</span><br><span class="line">    OnUpdate(instance <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListenerFunc <span class="function"><span class="keyword">func</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(f ListenerFunc)</span> <span class="title">OnUpdate</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    f(instance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Broadcaster <span class="keyword">struct</span> &#123;</span><br><span class="line">    listenerLock sync.RWMutex</span><br><span class="line">    listeners    []Listener</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBroadcaster</span><span class="params">()</span> *<span class="title">Broadcaster</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Broadcaster&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Broadcaster)</span> <span class="title">Add</span><span class="params">(listener Listener)</span></span> &#123;</span><br><span class="line">    b.listenerLock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> b.listenerLock.Unlock()</span><br><span class="line">    b.listeners = <span class="built_in">append</span>(b.listeners, listener)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Broadcaster)</span> <span class="title">Notify</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    b.listenerLock.RLock()</span><br><span class="line">    listeners := b.listeners</span><br><span class="line">    b.listenerLock.RUnlock()</span><br><span class="line">    <span class="keyword">for</span> _, listener := <span class="keyword">range</span> listeners &#123;</span><br><span class="line">        <span class="keyword">go</span> listener.OnUpdate(instance)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码设计的非常巧妙，其中Broadcaster里面包含了一个读写所sync.RWMutex以及一个Listener接口，也就是任何一个实现了Listener接口里面的OnUpdate方法都可以成为这个广播的成员；代码为OnUpdate()封装了一个函数类型ListenerFunc，这个函数调用了OnUpdate方法，即调用ListenerFunc就实现了OnUpdate方法；<br>在service_wathcer中，关于广播成员的添加代码如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServiceUpdatesHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">    OnServiceUpdate(serviceUpdate *ServiceUpdate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(svcw *serviceWatcher)</span> <span class="title">RegisterHandler</span><span class="params">(handler ServiceUpdatesHandler)</span></span> &#123;</span><br><span class="line">    svcw.broadcaster.Add(utils.ListenerFunc(<span class="function"><span class="keyword">func</span><span class="params">(instance <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        handler.OnServiceUpdate(instance.(*ServiceUpdate))</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上面所示：utils.ListenerFunc里面参数是一个函数参数，方法体内调用了handler.OnServiceUpdate方法。<br>在Notify方法中，就是调用每一个成员的OnUpdate方法，即成员通过这个方法来处理事件。To be honest，这其中的转换我还没理解的非常清楚。</p><h2 id="广播成员对事件的处理"><a href="#广播成员对事件的处理" class="headerlink" title="广播成员对事件的处理"></a>广播成员对事件的处理</h2><p>controllers是处理这些资源变化的对象，其中以serviceWathcer为例， network_services_controller通过实现OnupdateService方法来实现对service资源变化的处理：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle change in service update from the API server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nsc *NetworkServicesController)</span> <span class="title">OnServiceUpdate</span><span class="params">(serviceUpdate *watchers.ServiceUpdate)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    nsc.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> nsc.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    glog.Infof(<span class="string">"Received service update from watch API"</span>)</span><br><span class="line">    <span class="keyword">if</span> !(watchers.ServiceWatcher.HasSynced() &amp;&amp; watchers.EndpointsWatcher.HasSynced()) &#123;</span><br><span class="line">        glog.Infof(<span class="string">"Skipping ipvs server sync as local cache is not synced yet"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// build new services map to reflect the change</span></span><br><span class="line">    newServiceMap := buildServicesInfo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(newServiceMap) != <span class="built_in">len</span>(nsc.serviceMap) || !reflect.DeepEqual(newServiceMap, nsc.serviceMap) &#123;</span><br><span class="line">        nsc.serviceMap = newServiceMap</span><br><span class="line">        nsc.syncIpvsServices(nsc.serviceMap, nsc.endpointsMap)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        glog.Infof(<span class="string">"Skipping ipvs server sync on service update because nothing changed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如代码所示，首先通过同步获得最新的资源状态，然后构建新的serviceMap(buildServicesInfo()):<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildServicesInfo</span><span class="params">()</span> <span class="title">serviceInfoMap</span></span> &#123;</span><br><span class="line">    serviceMap := <span class="built_in">make</span>(serviceInfoMap)</span><br><span class="line">    <span class="keyword">for</span> _, svc := <span class="keyword">range</span> watchers.ServiceWatcher.List() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> svc.Spec.ClusterIP == <span class="string">"None"</span> || svc.Spec.ClusterIP == <span class="string">""</span> &#123;</span><br><span class="line">            glog.Infof(<span class="string">"Skipping service name:%s namespace:%s as there is no cluster IP"</span>, svc.Name, svc.Namespace)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> svc.Spec.Type == <span class="string">"LoadBalancer"</span> || svc.Spec.Type == <span class="string">"ExternalName"</span> &#123;</span><br><span class="line">            glog.Infof(<span class="string">"Skipping service name:%s namespace:%s due to service Type=%s"</span>, svc.Name, svc.Namespace, svc.Spec.Type)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _, port := <span class="keyword">range</span> svc.Spec.Ports &#123;</span><br><span class="line">            svcInfo := serviceInfo&#123;</span><br><span class="line">                clusterIP: net.ParseIP(svc.Spec.ClusterIP),</span><br><span class="line">                port:      <span class="keyword">int</span>(port.Port),</span><br><span class="line">                protocol:  strings.ToLower(<span class="keyword">string</span>(port.Protocol)),</span><br><span class="line">                nodePort:  <span class="keyword">int</span>(port.NodePort),</span><br><span class="line">            &#125;</span><br><span class="line">            svcId := generateServiceId(svc.Namespace, svc.Name, strconv.Itoa(<span class="keyword">int</span>(port.Port)))</span><br><span class="line">            serviceMap[svcId] = &amp;svcInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serviceMap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后和原来的资源进行比对，如果不一致，则进行更新操作；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;在阅读kube-router的源代码时，它是使用kubern
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes中基于ipvs的service-proxy设计和实现</title>
    <link href="http://yoursite.com/2017/08/17/ipvsOnK8s/"/>
    <id>http://yoursite.com/2017/08/17/ipvsOnK8s/</id>
    <published>2017-08-17T07:33:44.000Z</published>
    <updated>2017-08-18T06:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>kubernetes 关于其服务发现以及L4层负载均衡方面使用的是基于Iptables实现的kube-proxy，Kube-proxy在Kubernetes上是以DaemonSet资源的方式部署在上面的，但是kube-proxy在达到它设计的初衷上存在很多问题，主要包括扩展性，负载均衡等，所以现在有提出基于ipvs实现Kubernetes的服务发现以及负载均衡的提议和相关实现；<a href="https://github.com/kubernetes/kubernetes/issues/44063" target="_blank" rel="noopener">#44063</a>; <a href="https://github.com/cloudnativelabs/kube-router" target="_blank" rel="noopener">kube-router</a></p><h3 id="IPVS-LVS"><a href="#IPVS-LVS" class="headerlink" title="IPVS/LVS"></a>IPVS/LVS</h3><p>IPVS在linux内核上实现了传输层(L4)的负载均衡。IPVS被集成进LVS中，可以充当一组实际服务器集群中的负载均衡器。IPVS可以将针对基于TCP或者UDP服务的请求路由到真实的服务器，这样就可以将真实服务器中的服务（们）看成只有一个ip地址的虚拟服务。IPVS是基于<a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener">Netfilter</a>实现的。</p><h4 id="IPVS的使用"><a href="#IPVS的使用" class="headerlink" title="IPVS的使用"></a>IPVS的使用</h4><p>可以直接在linux中安装ipvsadm,关于ipvsadmde的使用命令如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-C 清除表中所有的记录</span><br><span class="line">-A --add-service在服务器列表中新添加一条新的虚拟服务器记录</span><br><span class="line">-t 表示为tcp服务</span><br><span class="line">-u 表示为udp服务</span><br><span class="line">-s --scheduler 使用的调度算法， rr | wrr | lc | wlc | lblb | lblcr | dh | sh | sed | nq 默认调度算法是 wlc</span><br><span class="line">ipvsadm -a -t 192.168.3.187:80 -r 192.168.200.10:80 -m -w 1</span><br><span class="line">-a --add-server 在服务器表中添加一条新的真实主机记录</span><br><span class="line">-t --tcp-service 说明虚拟服务器提供tcp服务</span><br><span class="line">-u --udp-service 说明虚拟服务器提供udp服务</span><br><span class="line">-r --real-server 真实服务器地址</span><br><span class="line">-m --masquerading 指定LVS工作模式为NAT模式</span><br><span class="line">-w --weight 真实服务器的权值</span><br><span class="line">-g --gatewaying 指定LVS工作模式为直接路由器模式（也是LVS默认的模式）</span><br><span class="line">-i --ipip 指定LVS的工作模式为隧道模式</span><br><span class="line">-p 会话保持时间，定义流量呗转到同一个realserver的会话存留时间</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">test</span>@LVS ~]$ sudo /sbin/ipvsadm -l </span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.1.17.10:http wlc</span><br><span class="line">  -&gt; 10.2.4.35:http            Route   100    25095      18542     </span><br><span class="line">  -&gt; 10.2.4.31:http            Route   100    25097      17657     </span><br><span class="line">  -&gt; 10.2.4.30:http            Route   100    25123      18953     </span><br><span class="line">  -&gt; 10.2.4.29:http            Route   100    25091      18727     </span><br><span class="line">  -&gt; 10.2.4.24:http            Route   100    25075      17703     </span><br><span class="line">  -&gt; 10.2.4.23:http            Route   100    25086      17465     </span><br><span class="line">  -&gt; 10.2.4.22:http            Route   100    25124      17628</span><br></pre></td></tr></table></figure><p>其中 InActConn 指非活跃连接数，我们将处于 TCP ESTABLISH 状态以外的连接都称为不活跃连接。例如处于 SYN_RECV 状态的连接，处于 TIME_WAIT 状态的连接等。<br>更多的ipvsadm信息可见：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><h3 id="Kube-router"><a href="#Kube-router" class="headerlink" title="Kube-router"></a>Kube-router</h3><h4 id="Kubernetes部署"><a href="#Kubernetes部署" class="headerlink" title="Kubernetes部署"></a>Kubernetes部署</h4><h4 id="kube-router插件的配置"><a href="#kube-router插件的配置" class="headerlink" title="kube-router插件的配置"></a>kube-router插件的配置</h4><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://cloudnativelabs.github.io/post/2017-05-10-kube-network-service-proxy/" target="_blank" rel="noopener">Kubernetes network services proxy with IPVS/LVS</a><br><a href="https://engineering.bitnami.com/articles/a-deep-dive-into-kubernetes-controllers.html" target="_blank" rel="noopener">A Deep Dive Into Kubernetes Controllers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;kubernetes 关于其服务发现以及L4层负载均衡方面使用的是基于Iptables实现的
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="ipvs" scheme="http://yoursite.com/tags/ipvs/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
</feed>
